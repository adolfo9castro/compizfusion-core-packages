Description: code migration from gconf to mate compatability
 This patch assumes that no files were renamed (ex: by migrate.sh).
 By renaming files after patching (and reverse before unpatch), 
 resulting patches are much smaller in size! See:
 http://pkg-perl.alioth.debian.org/howto/quilt.html#renaming_files
Author: Jasmine Hassan <jasmine.aura@gmail.com>
Origin: other, lmde
Last-Updated: 2012-10-08
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/compiz-gconf.pc.in
+++ b/compiz-gconf.pc.in
@@ -1,6 +1,6 @@
 prefix=@prefix@
 xsltdir=@datarootdir@/compiz
 
-Name: compiz-gconf
-Description: GConf plugin for compiz
+Name: compiz-mateconf
+Description: MateConf plugin for compiz
 Version: @VERSION@
--- a/configure.ac
+++ b/configure.ac
@@ -182,24 +182,24 @@ if test "$use_glib" = yes; then
   AC_DEFINE(USE_GLIB, 1, [Build glib plugin])
 fi
 
-AC_ARG_ENABLE(gconf,
-  [  --disable-gconf         Disable gconf plugin],
-  [use_gconf=$enableval], [use_gconf=yes])
+AC_ARG_ENABLE(mateconf,
+  [  --disable-mateconf         Disable mateconf plugin],
+  [use_mateconf=$enableval], [use_mateconf=yes])
 
-if test "x$use_gconf" = "xyes"; then
-  PKG_CHECK_MODULES(GCONF, gconf-2.0)
+if test "x$use_mateconf" = "xyes"; then
+  PKG_CHECK_MODULES(MATECONF, mateconf-2.0)
 
-  AC_PATH_PROG(GCONFTOOL, gconftool-2, no)
-  if test x"$GCONFTOOL" = xno; then
-    AC_MSG_ERROR([gconftool-2 executable not found in your path - should be installed with GConf])
+  AC_PATH_PROG(MATECONFTOOL, mateconftool-2, no)
+  if test x"$MATECONFTOOL" = xno; then
+    AC_MSG_ERROR([mateconftool-2 executable not found in your path - should be installed with MateConf])
   fi
 fi
 
-AM_GCONF_SOURCE_2
+AM_MATECONF_SOURCE_2
 
-AM_CONDITIONAL(USE_GCONF, test "x$use_gconf" = "xyes")
-if test "$use_gconf" = yes; then
-  AC_DEFINE(USE_GCONF, 1, [Build gconf plugin])
+AM_CONDITIONAL(USE_MATECONF, test "x$use_mateconf" = "xyes")
+if test "$use_mateconf" = yes; then
+  AC_DEFINE(USE_MATECONF, 1, [Build mateconf plugin])
 fi
 
 stylesheetdir=$datadir/compiz
@@ -286,17 +286,17 @@ AC_ARG_ENABLE(gtk,
   [  --disable-gtk           Disable gtk window decorator],
   [use_gtk=$enableval], [use_gtk=yes])
 
-AC_ARG_ENABLE(metacity,
-  [  --disable-metacity      Disable metacity theme support],
-  [use_metacity=$enableval], [use_metacity=yes])
-
-AC_ARG_ENABLE(gnome,
-  [  --disable-gnome         Disable gnome settings module],
-  [use_gnome=$enableval], [use_gnome=yes])
-
-AC_ARG_ENABLE(gnome-keybindings,
-  [  --disable-gnome-keybindings Disable gnome keybindings],
-  [use_gnome_keybindings=$enableval], [use_gnome_keybindings=yes])
+AC_ARG_ENABLE(marco,
+  [  --disable-marco      Disable marco theme support],
+  [use_marco=$enableval], [use_marco=yes])
+
+AC_ARG_ENABLE(mate,
+  [  --disable-mate         Disable mate settings module],
+  [use_mate=$enableval], [use_mate=yes])
+
+AC_ARG_ENABLE(mate-keybindings,
+  [  --disable-mate-keybindings Disable mate keybindings],
+  [use_mate_keybindings=$enableval], [use_mate_keybindings=yes])
 
 if test "x$use_gtk" = "xyes"; then
   PKG_CHECK_MODULES(GTK_WINDOW_DECORATOR,
@@ -320,38 +320,38 @@ if test "x$use_gtk" = "xyes"; then
 	PKG_CHECK_EXISTS(libwnck-1.0 >= 2.19.4,
 		     [have_libwnck_2_19_4=yes], [have_libwnck_2_19_4=no])
 
-    if test "x$use_metacity" = "xyes"; then
-      PKG_CHECK_MODULES(METACITY, libmetacity-private,
-			[use_metacity=yes], [use_metacity=no])
-      PKG_CHECK_EXISTS(libmetacity-private >= 2.15.21,
-		       [have_metacity_2_15_21=yes], [have_metacity_2_15_21=no])
-      PKG_CHECK_EXISTS(libmetacity-private >= 2.17.0,
-		       [have_metacity_2_17_0=yes], [have_metacity_2_17_0=no])
-      PKG_CHECK_EXISTS(libmetacity-private >= 2.23.2,
-		       [have_metacity_2_23_2=yes], [have_metacity_2_23_2=no])
+    if test "x$use_marco" = "xyes"; then
+      PKG_CHECK_MODULES(MARCO, libmarco-private,
+			[use_marco=yes], [use_marco=no])
+      PKG_CHECK_EXISTS(libmarco-private >= 2.15.21,
+		       [have_marco_2_15_21=yes], [have_marco_2_15_21=no])
+      PKG_CHECK_EXISTS(libmarco-private >= 2.17.0,
+		       [have_marco_2_17_0=yes], [have_marco_2_17_0=no])
+      PKG_CHECK_EXISTS(libmarco-private >= 2.23.2,
+		       [have_marco_2_23_2=yes], [have_marco_2_23_2=no])
     fi
 
-    if test "x$use_gnome" = "xyes"; then
-      PKG_CHECK_MODULES(GNOME_WINDOW_SETTINGS,
-			gnome-window-settings-2.0 gnome-desktop-2.0 gconf-2.0,
-			[use_gnome=yes], [use_gnome=no])
+    if test "x$use_mate" = "xyes"; then
+      PKG_CHECK_MODULES(MATE_WINDOW_SETTINGS,
+			mate-window-settings-2.0 mate-desktop-2.0 mateconf-2.0,
+			[use_mate=yes], [use_mate=no])
     fi
 
-    if test "x$use_gnome_keybindings" = "xyes"; then
-      PKG_CHECK_MODULES(GNOME_KEY_BINDINGS,
-			gnome-keybindings,
-			[use_gnome_keybindings=yes], [use_gnome_keybindings=no])
+    if test "x$use_mate_keybindings" = "xyes"; then
+      PKG_CHECK_MODULES(MATE_KEY_BINDINGS,
+			mate-keybindings,
+			[use_mate_keybindings=yes], [use_mate_keybindings=no])
     fi
 
-    windowsettingsdatadir=`pkg-config --variable=prefix gnome-window-settings-2.0`/share
-    windowsettingslibdir=`pkg-config --variable=libdir gnome-window-settings-2.0`    keybindingsdir=`pkg-config --variable=keysdir gnome-keybindings`
+    windowsettingsdatadir=`pkg-config --variable=prefix mate-window-settings-2.0`/share
+    windowsettingslibdir=`pkg-config --variable=libdir mate-window-settings-2.0`    keybindingsdir=`pkg-config --variable=keysdir mate-keybindings`
   else
-    use_metacity="no"
-    use_gnome="no"
+    use_marco="no"
+    use_mate="no"
   fi
 else
-  use_metacity="no"
-  use_gnome="no"
+  use_marco="no"
+  use_mate="no"
 fi
 
 AC_SUBST(windowsettingsdatadir)
@@ -371,31 +371,31 @@ if test "$use_gtk" = yes; then
   fi
 fi
 
-AM_CONDITIONAL(USE_METACITY, test "x$use_metacity" = "xyes")
-if test "$use_metacity" = yes; then
-  AC_DEFINE(USE_METACITY, 1, [Build metacity theme support])
-  if test "$have_metacity_2_15_21" = yes; then
-    AC_DEFINE(HAVE_METACITY_2_15_21, 1,
-	      [Define to 1 if metacity version >= 2.15.21])
+AM_CONDITIONAL(USE_MARCO, test "x$use_marco" = "xyes")
+if test "$use_marco" = yes; then
+  AC_DEFINE(USE_MARCO, 1, [Build marco theme support])
+  if test "$have_marco_2_15_21" = yes; then
+    AC_DEFINE(HAVE_MARCO_2_15_21, 1,
+	      [Define to 1 if marco version >= 2.15.21])
   fi
-  if test "$have_metacity_2_17_0" = yes; then
-    AC_DEFINE(HAVE_METACITY_2_17_0, 1,
-	      [Define to 1 if metacity version >= 2.17.0])
+  if test "$have_marco_2_17_0" = yes; then
+    AC_DEFINE(HAVE_MARCO_2_17_0, 1,
+	      [Define to 1 if marco version >= 2.17.0])
   fi
-  if test "$have_metacity_2_23_2" = yes; then
-    AC_DEFINE(HAVE_METACITY_2_23_2, 1,
-	      [Define to 1 if metacity version >= 2.23.2])
+  if test "$have_marco_2_23_2" = yes; then
+    AC_DEFINE(HAVE_MARCO_2_23_2, 1,
+	      [Define to 1 if marco version >= 2.23.2])
   fi
 fi
 
-AM_CONDITIONAL(USE_GNOME, test "x$use_gnome" = "xyes")
-if test "$use_gnome" = yes; then
-  AC_DEFINE(USE_GNOME, 1, [Build gnome settings module])
+AM_CONDITIONAL(USE_MATE, test "x$use_mate" = "xyes")
+if test "$use_mate" = yes; then
+  AC_DEFINE(USE_MATE, 1, [Build mate settings module])
 fi
 
-AM_CONDITIONAL(USE_GNOME_KEYBINDINGS, test "x$use_gnome_keybindings" = "xyes")
-if test "$use_gnome_keybindings" = yes; then
-  AC_DEFINE(USE_GNOME_KEYBINDINGS, 1, [Install custom keybindings])
+AM_CONDITIONAL(USE_MATE_KEYBINDINGS, test "x$use_mate_keybindings" = "xyes")
+if test "$use_mate_keybindings" = yes; then
+  AC_DEFINE(USE_MATE_KEYBINDINGS, 1, [Install custom keybindings])
 fi
 
 AC_ARG_ENABLE(kde,
@@ -617,7 +617,7 @@ AC_OUTPUT([
 compiz.pc
 compiz-cube.pc
 compiz-scale.pc
-compiz-gconf.pc
+compiz-mateconf.pc
 compiz-kconfig.pc
 Makefile
 src/Makefile
@@ -628,7 +628,7 @@ plugins/Makefile
 images/Makefile
 gtk/Makefile
 gtk/window-decorator/Makefile
-gtk/gnome/Makefile
+gtk/mate/Makefile
 kde/Makefile
 kde/window-decorator/Makefile
 kde/window-decorator-kde4/Makefile
@@ -639,7 +639,7 @@ metadata/Makefile
 echo ""
 echo "the following optional plugins will be compiled:"
 echo "  glib:     $use_glib"
-echo "  gconf:    $use_gconf"
+echo "  mateconf:    $use_mateconf"
 echo "  kconfig:  $use_kconfig"
 echo "  dbus:     $use_dbus"
 echo "  annotate: $use_annotate"
@@ -649,8 +649,8 @@ echo "  fuse:     $use_fuse"
 echo ""
 echo "and the following optional features will be compiled:"
 echo "  gtk:      $use_gtk"
-echo "  metacity: $use_metacity"
-echo "  gnome:    $use_gnome"
+echo "  marco: $use_marco"
+echo "  mate:    $use_mate"
 echo "  kde:      $use_kde"
 echo "  kde4:     $use_kde4"
 echo ""
--- a/gtk/gnome/50-compiz-desktop-key.xml.in
+++ b/gtk/gnome/50-compiz-desktop-key.xml.in
@@ -1,16 +1,16 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <KeyListEntries _name="Desktop" wm_name="compiz" package="compiz">
 
-	<KeyListEntry name="/apps/compiz/plugins/gnomecompat/allscreens/options/run_key"/>
+	<KeyListEntry name="/apps/compiz/plugins/matecompat/allscreens/options/run_key"/>
 
-	<KeyListEntry name="/apps/compiz/plugins/gnomecompat/allscreens/options/main_menu_key"/>
+	<KeyListEntry name="/apps/compiz/plugins/matecompat/allscreens/options/main_menu_key"/>
 
-	<KeyListEntry name="/apps/compiz/plugins/gnomecompat/allscreens/options/run_command_screenshot_key"/>
+	<KeyListEntry name="/apps/compiz/plugins/matecompat/allscreens/options/run_command_screenshot_key"/>
 
-	<KeyListEntry name="/apps/compiz/plugins/gnomecompat/allscreens/options/run_command_window_screenshot_key"/>
+	<KeyListEntry name="/apps/compiz/plugins/matecompat/allscreens/options/run_command_window_screenshot_key"/>
 
 	<KeyListEntry name="/apps/compiz/general/allscreens/options/show_desktop_key"/>
 
-	<KeyListEntry name="/apps/compiz/plugins/gnomecompat/allscreens/options/run_command_terminal_key"/>
+	<KeyListEntry name="/apps/compiz/plugins/matecompat/allscreens/options/run_command_terminal_key"/>
 
 </KeyListEntries>
--- a/gtk/gnome/compiz.desktop.in
+++ b/gtk/gnome/compiz.desktop.in
@@ -1,15 +1,14 @@
 [Desktop Entry]
 Type=Application
-Encoding=UTF-8
-_Name=Compiz
-Exec=compiz
+_Name=Compiz-MATE
+Exec=compiz-mate-gtk
 NoDisplay=true
 # name of loadable control center module
-X-GNOME-WMSettingsModule=compiz
+X-MATE-WMSettingsModule=marco
 # autostart phase
-X-GNOME-Autostart-Phase=WindowManager
-X-GNOME-Provides=windowmanager
+X-MATE-Autostart-Phase=WindowManager
+X-MATE-Provides=windowmanager
 # name we put on the WM spec check window
-X-GNOME-WMName=compiz
+X-MATE-WMName=compiz
 # back compat only 
-X-GnomeWMSettingsLibrary=compiz
+X-MateWMSettingsLibrary=marco
--- a/gtk/gnome/compiz-window-manager.c
+++ b/gtk/gnome/compiz-window-manager.c
@@ -27,7 +27,7 @@
 #include <sys/types.h>
 #include <dirent.h>
 #include <string.h>
-#include <gconf/gconf-client.h>
+#include <mateconf/mateconf-client.h>
 #include <glib/gi18n.h>
 
 #include "compiz-window-manager.h"
@@ -44,19 +44,19 @@
 #define COMPIZ_MOUSE_MOVE_KEY				 \
     "/apps/compiz/plugins/move/allscreens/options/initiate_button"
 
-#define GCONF_DIR "/apps/metacity/general"
+#define MATECONF_DIR "/apps/marco/general"
 
 #define COMPIZ_DOUBLE_CLICK_TITLEBAR_KEY      \
-    GCONF_DIR "/action_double_click_titlebar"
+    MATECONF_DIR "/action_double_click_titlebar"
 
 #define COMPIZ_USE_SYSTEM_FONT_KEY         \
-    GCONF_DIR "/titlebar_uses_system_font"
+    MATECONF_DIR "/titlebar_uses_system_font"
 
 #define COMPIZ_TITLEBAR_FONT_KEY \
-    GCONF_DIR "/titlebar_font"
+    MATECONF_DIR "/titlebar_font"
 
 #define COMPIZ_THEME_KEY \
-    GCONF_DIR "/theme"
+    MATECONF_DIR "/theme"
 
 enum {
     DOUBLE_CLICK_NONE,
@@ -85,26 +85,26 @@ static const struct {
     { DOUBLE_CLICK_MENU,                  "menu" }
 };
 
-static GnomeWindowManagerClass *parent_class;
+static MateWindowManagerClass *parent_class;
 
 struct _CompizWindowManagerPrivate {
-    GConfClient *gconf;
+    MateConfClient *mateconf;
     gchar	*font;
     gchar	*theme;
     gchar	*mouse_modifier;
 };
 
 static void
-value_changed (GConfClient *client,
+value_changed (MateConfClient *client,
 	       const gchar *key,
-	       GConfValue  *value,
+	       MateConfValue  *value,
 	       void        *data)
 {
     CompizWindowManager *wm;
 
     wm = COMPIZ_WINDOW_MANAGER (data);
 
-    gnome_window_manager_settings_changed (GNOME_WINDOW_MANAGER (wm));
+    mate_window_manager_settings_changed (MATE_WINDOW_MANAGER (wm));
 }
 
 /* this function is called when the shared lib is loaded */
@@ -113,10 +113,10 @@ window_manager_new (int expected_interfa
 {
     GObject *wm;
 
-    if (expected_interface_version != GNOME_WINDOW_MANAGER_INTERFACE_VERSION)
+    if (expected_interface_version != MATE_WINDOW_MANAGER_INTERFACE_VERSION)
     {
 	g_warning ("Compiz window manager module wasn't compiled with the "
-		   "current version of gnome-control-center");
+		   "current version of mate-control-center");
 	return NULL;
     }
 
@@ -126,51 +126,51 @@ window_manager_new (int expected_interfa
 }
 
 static void
-compiz_change_settings (GnomeWindowManager    *wm,
-			const GnomeWMSettings *settings)
+compiz_change_settings (MateWindowManager    *wm,
+			const MateWMSettings *settings)
 {
     CompizWindowManager *cwm;
 
     cwm = COMPIZ_WINDOW_MANAGER (wm);
 
-    if (settings->flags & GNOME_WM_SETTING_FONT)
-	gconf_client_set_string (cwm->p->gconf,
+    if (settings->flags & MATE_WM_SETTING_FONT)
+	mateconf_client_set_string (cwm->p->mateconf,
 				 COMPIZ_TITLEBAR_FONT_KEY,
 				 settings->font, NULL);
 
-    if (settings->flags & GNOME_WM_SETTING_MOUSE_FOCUS)
-	gconf_client_set_bool (cwm->p->gconf,
+    if (settings->flags & MATE_WM_SETTING_MOUSE_FOCUS)
+	mateconf_client_set_bool (cwm->p->mateconf,
 			       COMPIZ_CLICK_TO_FOCUS_KEY,
 			       settings->focus_follows_mouse == FALSE,
 			       NULL);
 
-     if (settings->flags & GNOME_WM_SETTING_AUTORAISE)
-	gconf_client_set_bool (cwm->p->gconf,
+     if (settings->flags & MATE_WM_SETTING_AUTORAISE)
+	mateconf_client_set_bool (cwm->p->mateconf,
 			       COMPIZ_AUTORAISE_KEY,
 			       settings->autoraise, NULL);
 
-     if (settings->flags & GNOME_WM_SETTING_AUTORAISE_DELAY)
-	gconf_client_set_int (cwm->p->gconf,
+     if (settings->flags & MATE_WM_SETTING_AUTORAISE_DELAY)
+	mateconf_client_set_int (cwm->p->mateconf,
 			      COMPIZ_AUTORAISE_DELAY_KEY,
 			      settings->autoraise_delay, NULL);
 
-    if (settings->flags & GNOME_WM_SETTING_MOUSE_MOVE_MODIFIER)
+    if (settings->flags & MATE_WM_SETTING_MOUSE_MOVE_MODIFIER)
     {
 	char *value;
 
 	value = g_strdup_printf ("<%s>Button1", settings->mouse_move_modifier);
-	gconf_client_set_string (cwm->p->gconf,
+	mateconf_client_set_string (cwm->p->mateconf,
 				 COMPIZ_MOUSE_MOVE_KEY,
 				 value, NULL);
 	g_free (value);
     }
 
-    if (settings->flags & GNOME_WM_SETTING_THEME)
-	gconf_client_set_string (cwm->p->gconf,
+    if (settings->flags & MATE_WM_SETTING_THEME)
+	mateconf_client_set_string (cwm->p->mateconf,
 				 COMPIZ_THEME_KEY,
 				 settings->theme, NULL);
 
-    if (settings->flags & GNOME_WM_SETTING_DOUBLE_CLICK_ACTION)
+    if (settings->flags & MATE_WM_SETTING_DOUBLE_CLICK_ACTION)
     {
 	const char   *action = NULL;
 	unsigned int i;
@@ -186,15 +186,15 @@ compiz_change_settings (GnomeWindowManag
 	}
 
 	if (action)
-	    gconf_client_set_string (cwm->p->gconf,
+	    mateconf_client_set_string (cwm->p->mateconf,
 				     COMPIZ_DOUBLE_CLICK_TITLEBAR_KEY,
 				     action, NULL);
     }
 }
 
 static void
-compiz_get_settings (GnomeWindowManager *wm,
-		     GnomeWMSettings    *settings)
+compiz_get_settings (MateWindowManager *wm,
+		     MateWMSettings    *settings)
 {
     CompizWindowManager *cwm;
     int			to_get;
@@ -204,11 +204,11 @@ compiz_get_settings (GnomeWindowManager
     to_get = settings->flags;
     settings->flags = 0;
 
-    if (to_get & GNOME_WM_SETTING_FONT)
+    if (to_get & MATE_WM_SETTING_FONT)
     {
 	char *str;
 
-	str = gconf_client_get_string (cwm->p->gconf,
+	str = mateconf_client_get_string (cwm->p->mateconf,
 				       COMPIZ_TITLEBAR_FONT_KEY,
 				       NULL);
 
@@ -222,43 +222,43 @@ compiz_get_settings (GnomeWindowManager
 
 	settings->font = cwm->p->font;
 
-	settings->flags |= GNOME_WM_SETTING_FONT;
+	settings->flags |= MATE_WM_SETTING_FONT;
     }
 
-    if (to_get & GNOME_WM_SETTING_MOUSE_FOCUS)
+    if (to_get & MATE_WM_SETTING_MOUSE_FOCUS)
     {
 	settings->focus_follows_mouse =
-	    gconf_client_get_bool (cwm->p->gconf,
+	    mateconf_client_get_bool (cwm->p->mateconf,
 				   COMPIZ_CLICK_TO_FOCUS_KEY, NULL) == FALSE;
 
-	settings->flags |= GNOME_WM_SETTING_MOUSE_FOCUS;
+	settings->flags |= MATE_WM_SETTING_MOUSE_FOCUS;
     }
 
-    if (to_get & GNOME_WM_SETTING_AUTORAISE)
+    if (to_get & MATE_WM_SETTING_AUTORAISE)
     {
-	settings->autoraise = gconf_client_get_bool (cwm->p->gconf,
+	settings->autoraise = mateconf_client_get_bool (cwm->p->mateconf,
 						     COMPIZ_AUTORAISE_KEY,
 						     NULL);
 
-	settings->flags |= GNOME_WM_SETTING_AUTORAISE;
+	settings->flags |= MATE_WM_SETTING_AUTORAISE;
     }
 
-    if (to_get & GNOME_WM_SETTING_AUTORAISE_DELAY)
+    if (to_get & MATE_WM_SETTING_AUTORAISE_DELAY)
     {
 	settings->autoraise_delay =
-	    gconf_client_get_int (cwm->p->gconf,
+	    mateconf_client_get_int (cwm->p->mateconf,
 				  COMPIZ_AUTORAISE_DELAY_KEY,
 				  NULL);
 
-	settings->flags |= GNOME_WM_SETTING_AUTORAISE_DELAY;
+	settings->flags |= MATE_WM_SETTING_AUTORAISE_DELAY;
     }
 
-    if (to_get & GNOME_WM_SETTING_MOUSE_MOVE_MODIFIER)
+    if (to_get & MATE_WM_SETTING_MOUSE_MOVE_MODIFIER)
     {
 	const char *new;
 	char	   *str;
 
-	str = gconf_client_get_string (cwm->p->gconf,
+	str = mateconf_client_get_string (cwm->p->mateconf,
 				       COMPIZ_MOUSE_MOVE_KEY,
 				       NULL);
 
@@ -287,14 +287,14 @@ compiz_get_settings (GnomeWindowManager
 
 	settings->mouse_move_modifier = cwm->p->mouse_modifier;
 
-	settings->flags |= GNOME_WM_SETTING_MOUSE_MOVE_MODIFIER;
+	settings->flags |= MATE_WM_SETTING_MOUSE_MOVE_MODIFIER;
     }
 
-    if (to_get & GNOME_WM_SETTING_THEME)
+    if (to_get & MATE_WM_SETTING_THEME)
     {
 	char *str;
 
-	str = gconf_client_get_string (cwm->p->gconf,
+	str = mateconf_client_get_string (cwm->p->mateconf,
 				       COMPIZ_THEME_KEY,
 				       NULL);
 
@@ -305,16 +305,16 @@ compiz_get_settings (GnomeWindowManager
 	cwm->p->theme = str;
 	settings->theme = cwm->p->theme;
 
-	settings->flags |= GNOME_WM_SETTING_THEME;
+	settings->flags |= MATE_WM_SETTING_THEME;
     }
 
-    if (to_get & GNOME_WM_SETTING_DOUBLE_CLICK_ACTION)
+    if (to_get & MATE_WM_SETTING_DOUBLE_CLICK_ACTION)
     {
 	char *str;
 
 	settings->double_click_action = DOUBLE_CLICK_MAXIMIZE;
 
-	str = gconf_client_get_string (cwm->p->gconf,
+	str = mateconf_client_get_string (cwm->p->mateconf,
 				       COMPIZ_DOUBLE_CLICK_TITLEBAR_KEY,
 				       NULL);
 
@@ -333,14 +333,14 @@ compiz_get_settings (GnomeWindowManager
 	    }
 	}
 
-	settings->flags |= GNOME_WM_SETTING_DOUBLE_CLICK_ACTION;
+	settings->flags |= MATE_WM_SETTING_DOUBLE_CLICK_ACTION;
     }
 }
 
 static int
-compiz_get_settings_mask (GnomeWindowManager *wm)
+compiz_get_settings_mask (MateWindowManager *wm)
 {
-    return GNOME_WM_SETTING_MASK;
+    return MATE_WM_SETTING_MASK;
 }
 
 static GList *
@@ -370,7 +370,7 @@ add_themes_from_dir (GList	*current_list
     {
 	theme_file_path =
 	    g_build_filename (path, entry->d_name,
-			      "metacity-1/metacity-theme-1.xml", NULL);
+			      "marco-1/marco-theme-1.xml", NULL);
 
 	if (g_file_test (theme_file_path, G_FILE_TEST_EXISTS))
 	{
@@ -394,14 +394,14 @@ add_themes_from_dir (GList	*current_list
 }
 
 static GList *
-compiz_get_theme_list (GnomeWindowManager *wm)
+compiz_get_theme_list (MateWindowManager *wm)
 {
     GList *themes = NULL;
     char  *home_dir_themes;
 
     home_dir_themes = g_build_filename (g_get_home_dir (), ".themes", NULL);
 
-    themes = add_themes_from_dir (themes, METACITY_THEME_DIR);
+    themes = add_themes_from_dir (themes, MARCO_THEME_DIR);
     themes = add_themes_from_dir (themes, "/usr/share/themes");
     themes = add_themes_from_dir (themes, home_dir_themes);
 
@@ -411,18 +411,18 @@ compiz_get_theme_list (GnomeWindowManage
 }
 
 static char *
-compiz_get_user_theme_folder (GnomeWindowManager *wm)
+compiz_get_user_theme_folder (MateWindowManager *wm)
 {
     return g_build_filename (g_get_home_dir (), ".themes", NULL);
 }
 
 static void
-compiz_get_double_click_actions (GnomeWindowManager             *wm,
-				 const GnomeWMDoubleClickAction **actions_p,
+compiz_get_double_click_actions (MateWindowManager             *wm,
+				 const MateWMDoubleClickAction **actions_p,
 				 int                            *n_actions_p)
 {
     static gboolean initialized = FALSE;
-    static GnomeWMDoubleClickAction actions[] = {
+    static MateWMDoubleClickAction actions[] = {
 	{ DOUBLE_CLICK_NONE,		      N_("None")		  },
 	{ DOUBLE_CLICK_SHADE,		      N_("Shade")		  },
 	{ DOUBLE_CLICK_MAXIMIZE,	      N_("Maximize")		  },
@@ -453,23 +453,23 @@ compiz_window_manager_init (CompizWindow
 			    CompizWindowManagerClass *class)
 {
     cwm->p		   = g_new0 (CompizWindowManagerPrivate, 1);
-    cwm->p->gconf	   = gconf_client_get_default ();
+    cwm->p->mateconf	   = mateconf_client_get_default ();
     cwm->p->mouse_modifier = NULL;
     cwm->p->font	   = NULL;
     cwm->p->theme	   = NULL;
 
-    gconf_client_add_dir (cwm->p->gconf,
+    mateconf_client_add_dir (cwm->p->mateconf,
 			  "/apps/compiz",
-			  GCONF_CLIENT_PRELOAD_ONELEVEL,
+			  MATECONF_CLIENT_PRELOAD_ONELEVEL,
 			  NULL);
 
-    gconf_client_add_dir (cwm->p->gconf,
-			  GCONF_DIR,
-			  GCONF_CLIENT_PRELOAD_ONELEVEL,
+    mateconf_client_add_dir (cwm->p->mateconf,
+			  MATECONF_DIR,
+			  MATECONF_CLIENT_PRELOAD_ONELEVEL,
 			  NULL);
 
 
-    g_signal_connect (G_OBJECT (cwm->p->gconf),
+    g_signal_connect (G_OBJECT (cwm->p->mateconf),
 		      "value_changed",
 		      G_CALLBACK (value_changed),
 		      cwm);
@@ -485,7 +485,7 @@ compiz_window_manager_finalize (GObject
 
     cwm = COMPIZ_WINDOW_MANAGER (object);
 
-    g_signal_handlers_disconnect_by_func (G_OBJECT (cwm->p->gconf),
+    g_signal_handlers_disconnect_by_func (G_OBJECT (cwm->p->mateconf),
 					  G_CALLBACK (value_changed),
 					  cwm);
 
@@ -498,7 +498,7 @@ compiz_window_manager_finalize (GObject
     if (cwm->p->theme)
 	g_free (cwm->p->theme);
 
-    g_object_unref (G_OBJECT (cwm->p->gconf));
+    g_object_unref (G_OBJECT (cwm->p->mateconf));
     g_free (cwm->p);
 
     G_OBJECT_CLASS (parent_class)->finalize (object);
@@ -508,14 +508,14 @@ static void
 compiz_window_manager_class_init (CompizWindowManagerClass *class)
 {
     GObjectClass	    *object_class;
-    GnomeWindowManagerClass *wm_class;
+    MateWindowManagerClass *wm_class;
 
     bindtextdomain (GETTEXT_PACKAGE, LOCALEDIR);
     bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
     textdomain (GETTEXT_PACKAGE);
 
     object_class = G_OBJECT_CLASS (class);
-    wm_class	 = GNOME_WINDOW_MANAGER_CLASS (class);
+    wm_class	 = MATE_WINDOW_MANAGER_CLASS (class);
 
     object_class->finalize = compiz_window_manager_finalize;
 
@@ -550,7 +550,7 @@ compiz_window_manager_get_type (void)
 	};
 
 	compiz_window_manager_type =
-	    g_type_register_static (gnome_window_manager_get_type (),
+	    g_type_register_static (mate_window_manager_get_type (),
 				    "CompizWindowManager",
 				    &compiz_window_manager_info, 0);
     }
--- a/gtk/gnome/compiz-window-manager.h
+++ b/gtk/gnome/compiz-window-manager.h
@@ -3,7 +3,7 @@
 
 #include <glib-object.h>
 
-#include "gnome-window-manager.h"
+#include "mate-window-manager.h"
 
 #define COMPIZ_WINDOW_MANAGER(obj)					\
     G_TYPE_CHECK_INSTANCE_CAST (obj, compiz_window_manager_get_type (), \
@@ -11,7 +11,7 @@
 
 #define COMPIZ_WINDOW_MANAGER_CLASS(klass)			       \
     G_TYPE_CHECK_CLASS_CAST (klass, compiz_window_manager_get_type (), \
-			     MetacityWindowManagerClass)
+			     MarcoWindowManagerClass)
 
 #define IS_COMPIZ_WINDOW_MANAGER(obj)					\
     G_TYPE_CHECK_INSTANCE_TYPE (obj, compiz_window_manager_get_type ())
@@ -22,12 +22,12 @@ typedef struct _CompizWindowManagerClass
 typedef struct _CompizWindowManagerPrivate CompizWindowManagerPrivate;
 
 struct _CompizWindowManager {
-    GnomeWindowManager	       parent;
+    MateWindowManager	       parent;
     CompizWindowManagerPrivate *p;
 };
 
 struct _CompizWindowManagerClass {
-    GnomeWindowManagerClass klass;
+    MateWindowManagerClass klass;
 };
 
 GType
--- a/gtk/gnome/compiz-wm.desktop.in
+++ b/gtk/gnome/compiz-wm.desktop.in
@@ -1,17 +1,16 @@
 [Desktop Entry]
 Type=Application
-Encoding=UTF-8
-_Name=Compiz
-Exec=compiz
+_Name=Compiz-MATE
+Exec=compiz-mate-gtk
 # name of loadable control center module
-X-GNOME-WMSettingsModule=compiz
+X-MATE-WMSettingsModule=marco
 # autostart phase
-X-GNOME-Autostart-Phase=WindowManager
-X-GNOME-Provides=windowmanager
+X-MATE-Autostart-Phase=WindowManager
+X-MATE-Provides=windowmanager
 # name we put on the WM spec check window
-X-GNOME-WMName=compiz
+X-MATE-WMName=compiz
 # back compat only 
-X-GnomeWMSettingsLibrary=compiz
+X-MateWMSettingsLibrary=marco
 
 [Window Manager]
 SessionManaged=false
--- a/gtk/gnome/Makefile.am
+++ b/gtk/gnome/Makefile.am
@@ -1,8 +1,8 @@
 moduledir = $(DESTDIR)$(windowsettingslibdir)/window-manager-settings
 
-if USE_GNOME
+if USE_MATE
 libcompiz_la_LDFLAGS = -export-dynamic -avoid-version -rpath $(moduledir)
-libcompiz_la_LIBADD  = @GNOME_WINDOW_SETTINGS_LIBS@
+libcompiz_la_LIBADD  = @MATE_WINDOW_SETTINGS_LIBS@
 libcompiz_la_SOURCES = 		\
 	compiz-window-manager.c	\
 	compiz-window-manager.h
@@ -12,13 +12,13 @@ desktopfilesdir	      = $(DESTDIR)$(data
 desktopfiles_in_files = compiz.desktop.in
 desktopfiles_files    = $(desktopfiles_in_files:.desktop.in=.desktop)
 
-wmpropertiesdir	      = $(DESTDIR)$(windowsettingsdatadir)/gnome/wm-properties
+wmpropertiesdir	      = $(DESTDIR)$(windowsettingsdatadir)/mate/wm-properties
 wmproperties_in_files = compiz-wm.desktop.in
 wmproperties_files    = $(wmproperties_in_files:.desktop.in=.desktop)
 
 @INTLTOOL_DESKTOP_RULE@
 
-if USE_GNOME_KEYBINDINGS
+if USE_MATE_KEYBINDINGS
 
 xmldir       = $(DESTDIR)$(keybindingsdir)
 xml_in_files = 50-compiz-desktop-key.xml.in 50-compiz-key.xml.in
@@ -47,7 +47,7 @@ install-data-local:
 		); \
 	fi
 
-if USE_GNOME_KEYBINDINGS
+if USE_MATE_KEYBINDINGS
 	if mkdir -p $(xmldir) && test -w $(xmldir); then ( \
 		$(INSTALL) -m 644 $(xml_files) \
 		$(xmldir) \
@@ -68,7 +68,7 @@ uninstall-local:
 		rm -f $(wmpropertiesdir)/compiz-wm.desktop \
 		); \
 	fi
-if USE_GNOME_KEYBINDINGS
+if USE_MATE_KEYBINDINGS
 	if test -w $(xmldir); then ( \
 		rm -f $(xmldir)/50-compiz*key.xml \
 		); \
@@ -76,8 +76,8 @@ if USE_GNOME_KEYBINDINGS
 endif
 endif
 
-INCLUDES = @GNOME_WINDOW_SETTINGS_CFLAGS@			   \
-	-DMETACITY_THEME_DIR=\""$(windowsettingsdatadir)/themes"\" \
+INCLUDES = @MATE_WINDOW_SETTINGS_CFLAGS@			   \
+	-DMARCO_THEME_DIR=\""$(windowsettingsdatadir)/themes"\" \
 	-DLOCALEDIR="\"@datadir@/locale"\"
 
 noinst_LTLIBRARIES = \
--- a/gtk/Makefile.am
+++ b/gtk/Makefile.am
@@ -1 +1 @@
-SUBDIRS = window-decorator gnome
+SUBDIRS = window-decorator mate
--- a/gtk/window-decorator/gtk-window-decorator.c
+++ b/gtk/window-decorator/gtk-window-decorator.c
@@ -43,8 +43,8 @@
 #include <gdk/gdkx.h>
 #include <glib/gi18n.h>
 
-#ifdef USE_GCONF
-#include <gconf/gconf-client.h>
+#ifdef USE_MATECONF
+#include <mateconf/mateconf-client.h>
 #endif
 
 #ifdef USE_DBUS_GLIB
@@ -79,72 +79,72 @@
 #include <sys/types.h>
 #include <signal.h>
 
-#ifdef USE_METACITY
-#include <metacity-private/theme.h>
+#ifdef USE_MARCO
+#include <marco-private/theme.h>
 #endif
 
-#define METACITY_GCONF_DIR "/apps/metacity/general"
+#define MARCO_MATECONF_DIR "/apps/marco/general"
 
 #define COMPIZ_USE_SYSTEM_FONT_KEY		    \
-    METACITY_GCONF_DIR "/titlebar_uses_system_font"
+    MARCO_MATECONF_DIR "/titlebar_uses_system_font"
 
 #define COMPIZ_TITLEBAR_FONT_KEY	\
-    METACITY_GCONF_DIR "/titlebar_font"
+    MARCO_MATECONF_DIR "/titlebar_font"
 
 #define COMPIZ_DOUBLE_CLICK_TITLEBAR_KEY	       \
-    METACITY_GCONF_DIR "/action_double_click_titlebar"
+    MARCO_MATECONF_DIR "/action_double_click_titlebar"
 
 #define COMPIZ_MIDDLE_CLICK_TITLEBAR_KEY	       \
-    METACITY_GCONF_DIR "/action_middle_click_titlebar"
+    MARCO_MATECONF_DIR "/action_middle_click_titlebar"
 
 #define COMPIZ_RIGHT_CLICK_TITLEBAR_KEY	       \
-    METACITY_GCONF_DIR "/action_right_click_titlebar"
+    MARCO_MATECONF_DIR "/action_right_click_titlebar"
 
-#define COMPIZ_GCONF_DIR1 "/apps/compiz/plugins/decoration/allscreens/options"
+#define COMPIZ_MATECONF_DIR1 "/apps/compiz/plugins/decoration/allscreens/options"
 
 #define COMPIZ_SHADOW_RADIUS_KEY \
-    COMPIZ_GCONF_DIR1 "/shadow_radius"
+    COMPIZ_MATECONF_DIR1 "/shadow_radius"
 
 #define COMPIZ_SHADOW_OPACITY_KEY \
-    COMPIZ_GCONF_DIR1 "/shadow_opacity"
+    COMPIZ_MATECONF_DIR1 "/shadow_opacity"
 
 #define COMPIZ_SHADOW_COLOR_KEY \
-    COMPIZ_GCONF_DIR1 "/shadow_color"
+    COMPIZ_MATECONF_DIR1 "/shadow_color"
 
 #define COMPIZ_SHADOW_OFFSET_X_KEY \
-    COMPIZ_GCONF_DIR1 "/shadow_x_offset"
+    COMPIZ_MATECONF_DIR1 "/shadow_x_offset"
 
 #define COMPIZ_SHADOW_OFFSET_Y_KEY \
-    COMPIZ_GCONF_DIR1 "/shadow_y_offset"
+    COMPIZ_MATECONF_DIR1 "/shadow_y_offset"
 
 #define META_THEME_KEY		\
-    METACITY_GCONF_DIR "/theme"
+    MARCO_MATECONF_DIR "/theme"
 
 #define META_BUTTON_LAYOUT_KEY		\
-    METACITY_GCONF_DIR "/button_layout"
+    MARCO_MATECONF_DIR "/button_layout"
 
-#define GCONF_DIR "/apps/gwd"
+#define MATECONF_DIR "/apps/gwd"
 
 #define USE_META_THEME_KEY	    \
-    GCONF_DIR "/use_metacity_theme"
+    MATECONF_DIR "/use_marco_theme"
 
 #define META_THEME_OPACITY_KEY	        \
-    GCONF_DIR "/metacity_theme_opacity"
+    MATECONF_DIR "/marco_theme_opacity"
 
 #define META_THEME_SHADE_OPACITY_KEY	      \
-    GCONF_DIR "/metacity_theme_shade_opacity"
+    MATECONF_DIR "/marco_theme_shade_opacity"
 
 #define META_THEME_ACTIVE_OPACITY_KEY	       \
-    GCONF_DIR "/metacity_theme_active_opacity"
+    MATECONF_DIR "/marco_theme_active_opacity"
 
 #define META_THEME_ACTIVE_SHADE_OPACITY_KEY          \
-    GCONF_DIR "/metacity_theme_active_shade_opacity"
+    MATECONF_DIR "/marco_theme_active_shade_opacity"
 
 #define BLUR_TYPE_KEY	   \
-    GCONF_DIR "/blur_type"
+    MATECONF_DIR "/blur_type"
 
 #define WHEEL_ACTION_KEY   \
-    GCONF_DIR "/mouse_wheel_action"
+    MATECONF_DIR "/mouse_wheel_action"
 
 #define DBUS_DEST       "org.freedesktop.compiz"
 #define DBUS_PATH       "/org/freedesktop/compiz/decoration/allscreens"
@@ -283,7 +283,7 @@ static gushort shadow_color[3] = {
 static gint    shadow_offset_x = SHADOW_OFFSET_X;
 static gint    shadow_offset_y = SHADOW_OFFSET_Y;
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
 static double   meta_opacity              = META_OPACITY;
 static gboolean meta_shade_opacity        = META_SHADE_OPACITY;
 static double   meta_active_opacity       = META_ACTIVE_OPACITY;
@@ -1318,7 +1318,7 @@ draw_window_decoration (decor_t *d)
     }
 }
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
 static void
 decor_update_meta_window_property (decor_t	  *d,
 				   MetaTheme	  *theme,
@@ -1405,7 +1405,7 @@ meta_get_corner_radius (const MetaFrameG
 			int			*bottom_right_radius)
 {
 
-#ifdef HAVE_METACITY_2_17_0
+#ifdef HAVE_MARCO_2_17_0
     *top_left_radius     = fgeom->top_left_corner_rounded_radius;
     *top_right_radius    = fgeom->top_right_corner_rounded_radius;
     *bottom_left_radius  = fgeom->bottom_left_corner_rounded_radius;
@@ -1626,7 +1626,7 @@ meta_function_to_type (MetaButtonFunctio
     case META_BUTTON_FUNCTION_CLOSE:
 	return META_BUTTON_TYPE_CLOSE;
 
-#ifdef HAVE_METACITY_2_17_0
+#ifdef HAVE_MARCO_2_17_0
     case META_BUTTON_FUNCTION_SHADE:
 	return META_BUTTON_TYPE_SHADE;
     case META_BUTTON_FUNCTION_ABOVE:
@@ -1684,7 +1684,7 @@ meta_button_state_for_button_type (decor
     case META_BUTTON_TYPE_MENU:
 	return meta_button_state (d->button_states[BUTTON_MENU]);
 
-#ifdef HAVE_METACITY_2_17_0
+#ifdef HAVE_MARCO_2_17_0
     case META_BUTTON_TYPE_SHADE:
 	return meta_button_state (d->button_states[BUTTON_SHADE]);
     case META_BUTTON_TYPE_ABOVE:
@@ -1785,7 +1785,7 @@ meta_get_decoration_geometry (decor_t		*
     if (d->state & WNCK_WINDOW_STATE_SHADED)
 	*flags |= META_FRAME_SHADED;
 
-#ifdef HAVE_METACITY_2_17_0
+#ifdef HAVE_MARCO_2_17_0
     if (d->state & WNCK_WINDOW_STATE_ABOVE)
 	*flags |= META_FRAME_ABOVE;
 #endif
@@ -1885,7 +1885,7 @@ meta_draw_window_decoration (decor_t *d)
     bg_color = style->bg[GTK_STATE_NORMAL];
     bg_alpha = 1.0;
 
-#ifdef HAVE_METACITY_2_17_0
+#ifdef HAVE_MARCO_2_17_0
     if (frame_style->window_background_color)
     {
 	meta_color_spec_render (frame_style->window_background_color,
@@ -2772,7 +2772,7 @@ get_button_position (decor_t *d,
     return TRUE;
 }
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
 
 #define TOP_RESIZE_HEIGHT 2
 #define RESIZE_EXTENDS 15
@@ -2926,7 +2926,7 @@ meta_get_button_position (decor_t *d,
     MetaTheme	      *theme;
     GdkRectangle      clip;
 
-#ifdef HAVE_METACITY_2_15_21
+#ifdef HAVE_MARCO_2_15_21
     MetaButtonSpace   *space;
 #else
     GdkRectangle      *space;
@@ -2971,7 +2971,7 @@ meta_get_button_position (decor_t *d,
 	space = &fgeom.close_rect;
 	break;
 
-#if defined (HAVE_METACITY_2_17_0) && defined (HAVE_LIBWNCK_2_18_1)
+#if defined (HAVE_MARCO_2_17_0) && defined (HAVE_LIBWNCK_2_18_1)
     case BUTTON_SHADE:
 	if (!meta_button_present (&button_layout, META_BUTTON_FUNCTION_SHADE))
 	    return FALSE;
@@ -3014,7 +3014,7 @@ meta_get_button_position (decor_t *d,
 	return FALSE;
     }
 
-#ifdef HAVE_METACITY_2_15_21
+#ifdef HAVE_MARCO_2_15_21
     if (!space->clickable.width && !space->clickable.height)
 	return FALSE;
 
@@ -3366,7 +3366,7 @@ calc_decoration_size (decor_t *d,
     return FALSE;
 }
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
 
 static void
 meta_calc_button_size (decor_t *d)
@@ -5753,13 +5753,13 @@ get_titlebar_font (void)
 	return titlebar_font;
 }
 
-#ifdef USE_GCONF
+#ifdef USE_MATECONF
 static void
-titlebar_font_changed (GConfClient *client)
+titlebar_font_changed (MateConfClient *client)
 {
     gchar *str;
 
-    str = gconf_client_get_string (client,
+    str = mateconf_client_get_string (client,
 				   COMPIZ_TITLEBAR_FONT_KEY,
 				   NULL);
     if (!str)
@@ -5774,7 +5774,7 @@ titlebar_font_changed (GConfClient *clie
 }
 
 static void
-titlebar_click_action_changed (GConfClient *client,
+titlebar_click_action_changed (MateConfClient *client,
 			       const gchar *key,
 			       int         *action_value,
 			       int          default_value)
@@ -5783,7 +5783,7 @@ titlebar_click_action_changed (GConfClie
 
     *action_value = default_value;
 
-    action = gconf_client_get_string (client, key, NULL);
+    action = mateconf_client_get_string (client, key, NULL);
     if (action)
     {
 	if (strcmp (action, "toggle_shade") == 0)
@@ -5810,13 +5810,13 @@ titlebar_click_action_changed (GConfClie
 }
 
 static void
-wheel_action_changed (GConfClient *client)
+wheel_action_changed (MateConfClient *client)
 {
     gchar *action;
 
     wheel_action = WHEEL_ACTION_DEFAULT;
 
-    action = gconf_client_get_string (client, WHEEL_ACTION_KEY, NULL);
+    action = mateconf_client_get_string (client, WHEEL_ACTION_KEY, NULL);
     if (action)
     {
 	if (strcmp (action, "shade") == 0)
@@ -5829,7 +5829,7 @@ wheel_action_changed (GConfClient *clien
 }
 #endif
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
 static MetaButtonFunction
 meta_button_function_from_string (const char *str)
 {
@@ -5842,7 +5842,7 @@ meta_button_function_from_string (const
     else if (strcmp (str, "close") == 0)
 	return META_BUTTON_FUNCTION_CLOSE;
 
-#ifdef HAVE_METACITY_2_17_0
+#ifdef HAVE_MARCO_2_17_0
     else if (strcmp (str, "shade") == 0)
 	return META_BUTTON_FUNCTION_SHADE;
     else if (strcmp (str, "above") == 0)
@@ -5866,7 +5866,7 @@ meta_button_opposite_function (MetaButto
 {
     switch (ofwhat)
     {
-#ifdef HAVE_METACITY_2_17_0
+#ifdef HAVE_MARCO_2_17_0
     case META_BUTTON_FUNCTION_SHADE:
 	return META_BUTTON_FUNCTION_UNSHADE;
     case META_BUTTON_FUNCTION_UNSHADE:
@@ -5897,7 +5897,7 @@ meta_initialize_button_layout (MetaButto
     {
 	layout->left_buttons[i] = META_BUTTON_FUNCTION_LAST;
 	layout->right_buttons[i] = META_BUTTON_FUNCTION_LAST;
-#ifdef HAVE_METACITY_2_23_2
+#ifdef HAVE_MARCO_2_23_2
 	layout->left_buttons_has_spacer[i] = FALSE;
 	layout->right_buttons_has_spacer[i] = FALSE;
 #endif
@@ -5931,7 +5931,7 @@ meta_update_button_layout (const char *v
 	while (buttons[b] != NULL)
 	{
 	    f = meta_button_function_from_string (buttons[b]);
-#ifdef HAVE_METACITY_2_23_2
+#ifdef HAVE_MARCO_2_23_2
 	    if (i > 0 && strcmp("spacer", buttons[b]) == 0)
             {
 	       new_layout.left_buttons_has_spacer[i - 1] = TRUE;
@@ -5978,7 +5978,7 @@ meta_update_button_layout (const char *v
 	    while (buttons[b] != NULL)
 	    {
 	       f = meta_button_function_from_string (buttons[b]);
-#ifdef HAVE_METACITY_2_23_2
+#ifdef HAVE_MARCO_2_23_2
 	       if (i > 0 && strcmp("spacer", buttons[b]) == 0)
 	       {
 		  new_layout.right_buttons_has_spacer[i - 1] = TRUE;
@@ -6031,7 +6031,7 @@ meta_update_button_layout (const char *v
 	for (j = 0; j < i; j++)
 	{
 	    rtl_layout.right_buttons[j] = new_layout.left_buttons[i - j - 1];
-#ifdef HAVE_METACITY_2_23_2
+#ifdef HAVE_MARCO_2_23_2
 	    if (j == 0)
 		rtl_layout.right_buttons_has_spacer[i - 1] =
 		    new_layout.left_buttons_has_spacer[i - j - 1];
@@ -6048,7 +6048,7 @@ meta_update_button_layout (const char *v
 	for (j = 0; j < i; j++)
 	{
 	    rtl_layout.left_buttons[j] = new_layout.right_buttons[i - j - 1];
-#ifdef HAVE_METACITY_2_23_2
+#ifdef HAVE_MARCO_2_23_2
 	    if (j == 0)
 		rtl_layout.left_buttons_has_spacer[i - 1] =
 		    new_layout.right_buttons_has_spacer[i - j - 1];
@@ -6074,7 +6074,7 @@ update_border_extents (gint text_height)
 	(text_height < 17) ? 17 : text_height;
 }
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
 static void
 meta_update_border_extents (gint text_height)
 {
@@ -6169,7 +6169,7 @@ decorations_changed (WnckScreen *screen)
 	if (d->decorated)
 	{
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
 	    if (d->draw == draw_window_decoration ||
 		d->draw == meta_draw_window_decoration)
 		d->draw = theme_draw_window_decoration;
@@ -6201,16 +6201,16 @@ style_changed (GtkWidget *widget)
     decorations_changed (screen);
 }
 
-#ifdef USE_GCONF
+#ifdef USE_MATECONF
 static gboolean
-shadow_settings_changed (GConfClient *client)
+shadow_settings_changed (MateConfClient *client)
 {
     double   radius, opacity;
     int      offset;
     gchar    *color;
     gboolean changed = FALSE;
 
-    radius = gconf_client_get_float (client,
+    radius = mateconf_client_get_float (client,
 				     COMPIZ_SHADOW_RADIUS_KEY,
 				     NULL);
     radius = MAX (0.0, MIN (radius, 48.0));
@@ -6220,7 +6220,7 @@ shadow_settings_changed (GConfClient *cl
 	changed = TRUE;
     }
 
-    opacity = gconf_client_get_float (client,
+    opacity = mateconf_client_get_float (client,
 				      COMPIZ_SHADOW_OPACITY_KEY,
 				      NULL);
     opacity = MAX (0.0, MIN (opacity, 6.0));
@@ -6230,7 +6230,7 @@ shadow_settings_changed (GConfClient *cl
 	changed = TRUE;
     }
 
-    color = gconf_client_get_string (client,
+    color = mateconf_client_get_string (client,
 				     COMPIZ_SHADOW_COLOR_KEY,
 				     NULL);
     if (color)
@@ -6248,7 +6248,7 @@ shadow_settings_changed (GConfClient *cl
 	g_free (color);
     }
 
-    offset = gconf_client_get_int (client,
+    offset = mateconf_client_get_int (client,
 				   COMPIZ_SHADOW_OFFSET_X_KEY,
 				   NULL);
     offset = MAX (-16, MIN (offset, 16));
@@ -6258,7 +6258,7 @@ shadow_settings_changed (GConfClient *cl
 	changed = TRUE;
     }
 
-    offset = gconf_client_get_int (client,
+    offset = mateconf_client_get_int (client,
 				   COMPIZ_SHADOW_OFFSET_Y_KEY,
 				   NULL);
     offset = MAX (-16, MIN (offset, 16));
@@ -6272,7 +6272,7 @@ shadow_settings_changed (GConfClient *cl
 }
 
 static gboolean
-blur_settings_changed (GConfClient *client)
+blur_settings_changed (MateConfClient *client)
 {
     gchar *type;
     int   new_type = blur_type;
@@ -6280,7 +6280,7 @@ blur_settings_changed (GConfClient *clie
     if (cmdline_options & CMDLINE_BLUR)
 	return FALSE;
 
-    type = gconf_client_get_string (client,
+    type = mateconf_client_get_string (client,
 				    BLUR_TYPE_KEY,
 				    NULL);
 
@@ -6306,16 +6306,16 @@ blur_settings_changed (GConfClient *clie
 }
 
 static gboolean
-theme_changed (GConfClient *client)
+theme_changed (MateConfClient *client)
 {
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
     gboolean use_meta_theme;
 
     if (cmdline_options & CMDLINE_THEME)
 	return FALSE;
 
-    use_meta_theme = gconf_client_get_bool (client,
+    use_meta_theme = mateconf_client_get_bool (client,
 					    USE_META_THEME_KEY,
 					    NULL);
 
@@ -6323,7 +6323,7 @@ theme_changed (GConfClient *client)
     {
 	gchar *theme;
 
-	theme = gconf_client_get_string (client,
+	theme = mateconf_client_get_string (client,
 					 META_THEME_KEY,
 					 NULL);
 
@@ -6372,14 +6372,14 @@ theme_changed (GConfClient *client)
 }
 
 static gboolean
-theme_opacity_changed (GConfClient *client)
+theme_opacity_changed (MateConfClient *client)
 {
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
     gboolean shade_opacity, changed = FALSE;
     gdouble  opacity;
 
-    opacity = gconf_client_get_float (client,
+    opacity = mateconf_client_get_float (client,
 				      META_THEME_OPACITY_KEY,
 				      NULL);
 
@@ -6392,7 +6392,7 @@ theme_opacity_changed (GConfClient *clie
 
     if (opacity < 1.0)
     {
-	shade_opacity = gconf_client_get_bool (client,
+	shade_opacity = mateconf_client_get_bool (client,
 					       META_THEME_SHADE_OPACITY_KEY,
 					       NULL);
 
@@ -6404,7 +6404,7 @@ theme_opacity_changed (GConfClient *clie
 	}
     }
 
-    opacity = gconf_client_get_float (client,
+    opacity = mateconf_client_get_float (client,
 				      META_THEME_ACTIVE_OPACITY_KEY,
 				      NULL);
 
@@ -6418,7 +6418,7 @@ theme_opacity_changed (GConfClient *clie
     if (opacity < 1.0)
     {
 	shade_opacity =
-	    gconf_client_get_bool (client,
+	    mateconf_client_get_bool (client,
 				   META_THEME_ACTIVE_SHADE_OPACITY_KEY,
 				   NULL);
 
@@ -6438,13 +6438,13 @@ theme_opacity_changed (GConfClient *clie
 }
 
 static gboolean
-button_layout_changed (GConfClient *client)
+button_layout_changed (MateConfClient *client)
 {
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
     gchar *button_layout;
 
-    button_layout = gconf_client_get_string (client,
+    button_layout = mateconf_client_get_string (client,
 					     META_BUTTON_LAYOUT_KEY,
 					     NULL);
 
@@ -6470,16 +6470,16 @@ button_layout_changed (GConfClient *clie
 }
 
 static void
-value_changed (GConfClient *client,
+value_changed (MateConfClient *client,
 	       const gchar *key,
-	       GConfValue  *value,
+	       MateConfValue  *value,
 	       void        *data)
 {
     gboolean changed = FALSE;
 
     if (strcmp (key, COMPIZ_USE_SYSTEM_FONT_KEY) == 0)
     {
-	if (gconf_client_get_bool (client,
+	if (mateconf_client_get_bool (client,
 				   COMPIZ_USE_SYSTEM_FONT_KEY,
 				   NULL) != use_system_font)
 	{
@@ -6694,27 +6694,27 @@ init_settings (WnckScreen *screen)
     GdkColormap	   *colormap;
     AtkObject	   *switcher_label_obj;
 
-#ifdef USE_GCONF
-    GConfClient	   *gconf;
+#ifdef USE_MATECONF
+    MateConfClient	   *mateconf;
 
-    gconf = gconf_client_get_default ();
+    mateconf = mateconf_client_get_default ();
 
-    gconf_client_add_dir (gconf,
-			  GCONF_DIR,
-			  GCONF_CLIENT_PRELOAD_ONELEVEL,
+    mateconf_client_add_dir (mateconf,
+			  MATECONF_DIR,
+			  MATECONF_CLIENT_PRELOAD_ONELEVEL,
 			  NULL);
 
-    gconf_client_add_dir (gconf,
-			  METACITY_GCONF_DIR,
-			  GCONF_CLIENT_PRELOAD_ONELEVEL,
+    mateconf_client_add_dir (mateconf,
+			  MARCO_MATECONF_DIR,
+			  MATECONF_CLIENT_PRELOAD_ONELEVEL,
 			  NULL);
 
-    gconf_client_add_dir (gconf,
-			  COMPIZ_GCONF_DIR1,
-			  GCONF_CLIENT_PRELOAD_ONELEVEL,
+    mateconf_client_add_dir (mateconf,
+			  COMPIZ_MATECONF_DIR1,
+			  MATECONF_CLIENT_PRELOAD_ONELEVEL,
 			  NULL);
 
-    g_signal_connect (G_OBJECT (gconf),
+    g_signal_connect (G_OBJECT (mateconf),
 		      "value_changed",
 		      G_CALLBACK (value_changed),
 		      screen);
@@ -6838,39 +6838,39 @@ init_settings (WnckScreen *screen)
 
     pango_context = gtk_widget_create_pango_context (style_window);
 
-#ifdef USE_GCONF
-    use_system_font = gconf_client_get_bool (gconf,
+#ifdef USE_MATECONF
+    use_system_font = mateconf_client_get_bool (mateconf,
 					     COMPIZ_USE_SYSTEM_FONT_KEY,
 					     NULL);
-    theme_changed (gconf);
-    theme_opacity_changed (gconf);
-    button_layout_changed (gconf);
+    theme_changed (mateconf);
+    theme_opacity_changed (mateconf);
+    button_layout_changed (mateconf);
 #endif
 
     update_style (style_window);
 
-#ifdef USE_GCONF
-    titlebar_font_changed (gconf);
+#ifdef USE_MATECONF
+    titlebar_font_changed (mateconf);
 #endif
 
     update_titlebar_font ();
 
-#ifdef USE_GCONF
-    titlebar_click_action_changed (gconf,
+#ifdef USE_MATECONF
+    titlebar_click_action_changed (mateconf,
 				   COMPIZ_DOUBLE_CLICK_TITLEBAR_KEY,
 				   &double_click_action,
 				   DOUBLE_CLICK_ACTION_DEFAULT);
-    titlebar_click_action_changed (gconf,
+    titlebar_click_action_changed (mateconf,
 				   COMPIZ_MIDDLE_CLICK_TITLEBAR_KEY,
 				   &middle_click_action,
 				   MIDDLE_CLICK_ACTION_DEFAULT);
-    titlebar_click_action_changed (gconf,
+    titlebar_click_action_changed (mateconf,
 				   COMPIZ_RIGHT_CLICK_TITLEBAR_KEY,
 				   &right_click_action,
 				   RIGHT_CLICK_ACTION_DEFAULT);
-    wheel_action_changed (gconf);
-    shadow_settings_changed (gconf);
-    blur_settings_changed (gconf);
+    wheel_action_changed (mateconf);
+    shadow_settings_changed (mateconf);
+    blur_settings_changed (mateconf);
 #endif
 
     (*theme_update_border_extents) (text_height);
@@ -6890,7 +6890,7 @@ main (int argc, char *argv[])
     gint       i, j, status;
     gboolean   replace = FALSE;
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
     char       *meta_theme = NULL;
 #endif
 
@@ -6924,7 +6924,7 @@ main (int argc, char *argv[])
 	    cmdline_options |= CMDLINE_BLUR;
 	}
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
 	else if (strcmp (argv[i], "--opacity") == 0)
 	{
 	    if (argc > ++i)
@@ -6947,7 +6947,7 @@ main (int argc, char *argv[])
 	    meta_active_shade_opacity = FALSE;
 	    cmdline_options |= CMDLINE_ACTIVE_OPACITY_SHADE;
 	}
-	else if (strcmp (argv[i], "--metacity-theme") == 0)
+	else if (strcmp (argv[i], "--marco-theme") == 0)
 	{
 	    if (argc > ++i)
 		meta_theme = argv[i];
@@ -6962,12 +6962,12 @@ main (int argc, char *argv[])
 		     "[--replace] "
 		     "[--blur none|titlebar|all] "
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
 		     "[--opacity OPACITY] "
 		     "[--no-opacity-shade] "
 		     "[--active-opacity OPACITY] "
 		     "[--no-active-opacity-shade] "
-		     "[--metacity-theme THEME] "
+		     "[--marco-theme THEME] "
 #endif
 
 		     "[--help]"
@@ -6983,7 +6983,7 @@ main (int argc, char *argv[])
     theme_get_event_window_position = get_event_window_position;
     theme_get_button_position       = get_button_position;
 
-#ifdef USE_METACITY
+#ifdef USE_MARCO
     if (meta_theme)
     {
 	meta_theme_set_current (meta_theme, TRUE);
--- a/gtk/window-decorator/gwd.schemas.in
+++ b/gtk/window-decorator/gwd.schemas.in
@@ -1,4 +1,4 @@
-<gconfschemafile>
+<mateconfschemafile>
     <schemalist>
         <schema>
             <key>/schemas/apps/gwd/blur_type</key>
@@ -12,14 +12,14 @@
             </locale>
         </schema>
         <schema>
-            <key>/schemas/apps/gwd/use_metacity_theme</key>
-            <applyto>/apps/gwd/use_metacity_theme</applyto>
+            <key>/schemas/apps/gwd/use_marco_theme</key>
+            <applyto>/apps/gwd/use_marco_theme</applyto>
             <owner>gwd</owner>
             <type>bool</type>
             <default>true</default>
             <locale name="C">
-                <short>Use metacity theme</short>
-                <long>Use metacity theme when drawing window decorations</long>
+                <short>Use marco theme</short>
+                <long>Use marco theme when drawing window decorations</long>
             </locale>
         </schema>
         <schema>
@@ -34,48 +34,48 @@
             </locale>
         </schema>
         <schema>
-            <key>/schemas/apps/gwd/metacity_theme_opacity</key>
-            <applyto>/apps/gwd/metacity_theme_opacity</applyto>
+            <key>/schemas/apps/gwd/marco_theme_opacity</key>
+            <applyto>/apps/gwd/marco_theme_opacity</applyto>
             <owner>gwd</owner>
             <type>float</type>
             <default>0.75</default>
             <locale name="C">
-                <short>Metacity theme opacity</short>
-                <long>Opacity to use for metacity theme decorations</long>
+                <short>Marco theme opacity</short>
+                <long>Opacity to use for marco theme decorations</long>
             </locale>
         </schema>
         <schema>
-            <key>/schemas/apps/gwd/metacity_theme_shade_opacity</key>
-            <applyto>/apps/gwd/metacity_theme_shade_opacity</applyto>
+            <key>/schemas/apps/gwd/marco_theme_shade_opacity</key>
+            <applyto>/apps/gwd/marco_theme_shade_opacity</applyto>
             <owner>gwd</owner>
             <type>bool</type>
             <default>true</default>
             <locale name="C">
-                <short>Metacity theme opacity shade</short>
-                <long>Shade windows with metacity theme decorations from opaque to translucent</long>
+                <short>Marco theme opacity shade</short>
+                <long>Shade windows with marco theme decorations from opaque to translucent</long>
             </locale>
         </schema>
         <schema>
-            <key>/schemas/apps/gwd/metacity_theme_active_opacity</key>
-            <applyto>/apps/gwd/metacity_theme_active_opacity</applyto>
+            <key>/schemas/apps/gwd/marco_theme_active_opacity</key>
+            <applyto>/apps/gwd/marco_theme_active_opacity</applyto>
             <owner>gwd</owner>
             <type>float</type>
             <default>1.0</default>
             <locale name="C">
-                <short>Metacity theme active window opacity</short>
-                <long>Opacity to use for active windows with metacity theme decorations</long>
+                <short>Marco theme active window opacity</short>
+                <long>Opacity to use for active windows with marco theme decorations</long>
             </locale>
         </schema>
         <schema>
-            <key>/schemas/apps/gwd/metacity_theme_active_shade_opacity</key>
-            <applyto>/apps/gwd/metacity_theme_active_shade_opacity</applyto>
+            <key>/schemas/apps/gwd/marco_theme_active_shade_opacity</key>
+            <applyto>/apps/gwd/marco_theme_active_shade_opacity</applyto>
             <owner>gwd</owner>
             <type>bool</type>
             <default>true</default>
             <locale name="C">
-                <short>Metacity theme active window opacity shade</short>
-                <long>Shade active windows with metacity theme decorations from opaque to translucent</long>
+                <short>Marco theme active window opacity shade</short>
+                <long>Shade active windows with marco theme decorations from opaque to translucent</long>
             </locale>
         </schema>
     </schemalist>  
-</gconfschemafile>
+</mateconfschemafile>
--- a/gtk/window-decorator/Makefile.am
+++ b/gtk/window-decorator/Makefile.am
@@ -1,7 +1,7 @@
 if USE_GTK
 
-if USE_METACITY
-metacitylibs = @METACITY_LIBS@
+if USE_MARCO
+marcolibs = @MARCO_LIBS@
 endif
 
 gtk_window_decorator_DEPENDENCIES = \
@@ -9,17 +9,17 @@ gtk_window_decorator_DEPENDENCIES = \
 gtk_window_decorator_LDADD	  =		       \
 	$(top_builddir)/libdecoration/libdecoration.la \
 	@GTK_WINDOW_DECORATOR_LIBS@		       \
-	@GCONF_LIBS@				       \
+	@MATECONF_LIBS@				       \
 	@DBUS_GLIB_LIBS@			       \
-	$(metacitylibs)
+	$(marcolibs)
 
 gtk_window_decorator_SOURCES	  = \
 	gtk-window-decorator.c
 gtk_window_decorator_program = gtk-window-decorator
 endif
 
-if USE_GCONF
-schemadir       = $(GCONF_SCHEMA_FILE_DIR)
+if USE_MATECONF
+schemadir       = $(MATECONF_SCHEMA_FILE_DIR)
 schema_in_files = gwd.schemas.in
 schema_files    = $(schema_in_files:.schemas.in=.schemas)
 schema_DATA     = $(schema_files)
@@ -28,15 +28,15 @@ schema_DATA     = $(schema_files)
 
 install-data-local:
 	if test -z "$(DESTDIR)" ; then \
-		GCONF_CONFIG_SOURCE=$(GCONF_SCHEMA_CONFIG_SOURCE) $(GCONFTOOL) --makefile-install-rule $(schema_DATA); \
+		MATECONF_CONFIG_SOURCE=$(MATECONF_SCHEMA_CONFIG_SOURCE) $(MATECONFTOOL) --makefile-install-rule $(schema_DATA); \
 	fi
 endif
 
 INCLUDES = \
 	-I$(top_srcdir)/include            \
 	@GTK_WINDOW_DECORATOR_CFLAGS@      \
-	@METACITY_CFLAGS@                  \
-	@GCONF_CFLAGS@                     \
+	@MARCO_CFLAGS@                  \
+	@MATECONF_CFLAGS@                     \
 	@DBUS_GLIB_CFLAGS@                 \
 	-DALL_LINGUAS="\"@ALL_LINGUAS@\""  \
 	-DLOCALEDIR="\"@datadir@/locale"\"
--- a/Makefile.am
+++ b/Makefile.am
@@ -8,14 +8,14 @@ EXTRA_DIST =		    \
 	compiz.pc.in	    \
 	compiz-cube.pc.in   \
 	compiz-scale.pc.in  \
-	compiz-gconf.pc.in
+	compiz-mateconf.pc.in
 
 DISTCLEANFILES =	 \
 	po/stamp-it	 \
 	po/.intltool-merge-cache
 
-if USE_GCONF
-gconfdata = compiz-gconf.pc
+if USE_MATECONF
+mateconfdata = compiz-mateconf.pc
 endif
 
 if USE_KCONFIG
@@ -27,7 +27,7 @@ pkgconfig_DATA =	\
 	compiz.pc	\
 	compiz-cube.pc	\
 	compiz-scale.pc \
-	$(gconfdata)	\
+	$(mateconfdata)	\
 	$(kconfigdata)
 
 # Some custom targets to make it easier to release things.
--- a/metadata/gconf.xml.in
+++ b/metadata/gconf.xml.in
@@ -1,7 +1,7 @@
 <compiz>
-    <plugin name="gconf">
-	<_short>GConf</_short>
-	<_long>GConf Control Backend</_long>
+    <plugin name="mateconf">
+	<_short>MateConf</_short>
+	<_long>MateConf Control Backend</_long>
 	<deps>
 	    <relation type="after">
 		<plugin>glib</plugin>
--- a/metadata/gnomecompat.xml.in
+++ b/metadata/gnomecompat.xml.in
@@ -1,7 +1,7 @@
 <compiz>
-    <plugin name="gnomecompat">
-	<_short>Gnome Compatibility</_short>
-	<_long>Options that keep Compiz compatible to the Gnome desktop environment</_long>
+    <plugin name="matecompat">
+	<_short>Mate Compatibility</_short>
+	<_long>Options that keep Compiz compatible to the Mate desktop environment</_long>
 	<category>General</category>
 	<display>
 	    <option name="main_menu_key" type="key">
@@ -19,7 +19,7 @@
 		<option name="command_screenshot" type="string">
 		    <_short>Screenshot command line</_short>
 		    <_long>Screenshot command line</_long>
-		    <default>gnome-screenshot</default>
+		    <default>mate-screenshot</default>
 		</option>
 		<option name="run_command_screenshot_key" type="key">
 		    <_short>Take a screenshot</_short>
@@ -29,7 +29,7 @@
 		<option name="command_window_screenshot" type="string">
 		    <_short>Window screenshot command line</_short>
 		    <_long>Window screenshot command line</_long>
-		    <default>gnome-screenshot --window</default>
+		    <default>mate-screenshot --window</default>
 		</option>
 		<option name="run_command_window_screenshot_key" type="key">
 		    <_short>Take a screenshot of a window</_short>
@@ -40,7 +40,7 @@
 		<option name="command_terminal" type="string">
 		    <_short>Terminal command line</_short>
 		    <_long>Terminal command line</_long>
-		    <default>gnome-terminal</default>
+		    <default>mate-terminal</default>
 		</option>
 		<option name="run_command_terminal_key" type="key">
 		    <_short>Open a terminal</_short>
--- a/metadata/Makefile.am
+++ b/metadata/Makefile.am
@@ -10,9 +10,9 @@ xml_in_files =		   \
 	decoration.xml.in  \
 	fade.xml.in	   \
 	fs.xml.in	   \
-	gconf.xml.in	   \
+	mateconf.xml.in	   \
 	glib.xml.in	   \
-	gnomecompat.xml.in \
+	matecompat.xml.in \
 	ini.xml.in	   \
 	inotify.xml.in	   \
 	kconfig.xml.in	   \
@@ -43,8 +43,8 @@ core.xml.in: core.xml.in.in Makefile
 
 @INTLTOOL_XML_RULE@
 
-if USE_GCONF
-schemadir    = $(GCONF_SCHEMA_FILE_DIR)
+if USE_MATECONF
+schemadir    = $(MATECONF_SCHEMA_FILE_DIR)
 schema_files = $(patsubst %.xml.in,compiz-%.schemas,$(xml_in_files))
 schema_DATA  = $(schema_files)
 
@@ -81,10 +81,10 @@ noinst_DATA =		  \
 	$(kde_config_files)
 
 install-data-local:
-if USE_GCONF
-if GCONF_SCHEMAS_INSTALL
+if USE_MATECONF
+if MATECONF_SCHEMAS_INSTALL
 	if test -z "$(DESTDIR)" ; then \
-		GCONF_CONFIG_SOURCE=$(GCONF_SCHEMA_CONFIG_SOURCE) $(GCONFTOOL) --makefile-install-rule $(schema_DATA); \
+		MATECONF_CONFIG_SOURCE=$(MATECONF_SCHEMA_CONFIG_SOURCE) $(MATECONFTOOL) --makefile-install-rule $(schema_DATA); \
         fi
 endif
 endif
--- a/metadata/schemas.xslt
+++ b/metadata/schemas.xslt
@@ -29,13 +29,13 @@
   <xsl:param name="appName">/apps/compiz</xsl:param>
 
   <xsl:template  match="/compiz">
-    <gconfschemafile>
+    <mateconfschemafile>
       <schemalist>
         <xsl:for-each select="/compiz//option[not(@read_only='true') and not(@type='action')]">
           <xsl:call-template name="dumpOption"/>
         </xsl:for-each>
       </schemalist>
-    </gconfschemafile>
+    </mateconfschemafile>
   </xsl:template>
 
   <!-- generates the schema for an option -->
@@ -120,7 +120,7 @@
     </schema>
   </xsl:template>
 
-  <!-- converts a compiz type to a gconf type -->
+  <!-- converts a compiz type to a mateconf type -->
   <xsl:template name="printType">
     <xsl:param name="type">
       <xsl:value-of select="@type"/>
--- a/plugins/fade.c
+++ b/plugins/fade.c
@@ -770,7 +770,7 @@ fadeInitDisplay (CompPlugin  *p,
     matchInit (&fd->alwaysFadeWindowMatch);
     matchAddExp (&fd->alwaysFadeWindowMatch, 0, "title=gksu");
     matchAddExp (&fd->alwaysFadeWindowMatch, 0, "title=x-session-manager");
-    matchAddExp (&fd->alwaysFadeWindowMatch, 0, "title=gnome-session");
+    matchAddExp (&fd->alwaysFadeWindowMatch, 0, "title=mate-session");
     matchUpdate (d, &fd->alwaysFadeWindowMatch);
 
     WRAP (fd, d, handleEvent, fadeHandleEvent);
--- a/plugins/gconf.c
+++ b/plugins/gconf.c
@@ -31,39 +31,39 @@
 
 #include <glib.h>
 #include <glib/gprintf.h>
-#include <gconf/gconf-client.h>
+#include <mateconf/mateconf-client.h>
 
 #include <compiz-core.h>
 
-static CompMetadata gconfMetadata;
+static CompMetadata mateconfMetadata;
 
 #define APP_NAME "compiz"
 
-/* From gconf-internal.h. Bleah. */
-int gconf_value_compare (const GConfValue *value_a,
-			 const GConfValue *value_b);
+/* From mateconf-internal.h. Bleah. */
+int mateconf_value_compare (const MateConfValue *value_a,
+			 const MateConfValue *value_b);
 
 static int corePrivateIndex;
 
-typedef struct _GConfCore {
-    GConfClient *client;
+typedef struct _MateConfCore {
+    MateConfClient *client;
     guint	cnxn;
 
     CompTimeoutHandle reloadHandle;
 
     InitPluginForObjectProc initPluginForObject;
     SetOptionForPluginProc  setOptionForPlugin;
-} GConfCore;
+} MateConfCore;
 
-#define GET_GCONF_CORE(c)				     \
-    ((GConfCore *) (c)->base.privates[corePrivateIndex].ptr)
+#define GET_MATECONF_CORE(c)				     \
+    ((MateConfCore *) (c)->base.privates[corePrivateIndex].ptr)
 
-#define GCONF_CORE(c)		       \
-    GConfCore *gc = GET_GCONF_CORE (c)
+#define MATECONF_CORE(c)		       \
+    MateConfCore *gc = GET_MATECONF_CORE (c)
 
 
 static gchar *
-gconfGetKey (CompObject  *object,
+mateconfGetKey (CompObject  *object,
 	     const gchar *plugin,
 	     const gchar *option)
 {
@@ -95,57 +95,57 @@ gconfGetKey (CompObject  *object,
     return key;
 }
 
-static GConfValueType
-gconfTypeFromCompType (CompOptionType type)
+static MateConfValueType
+mateconfTypeFromCompType (CompOptionType type)
 {
     switch (type) {
     case CompOptionTypeBool:
     case CompOptionTypeBell:
-	return GCONF_VALUE_BOOL;
+	return MATECONF_VALUE_BOOL;
     case CompOptionTypeInt:
-	return GCONF_VALUE_INT;
+	return MATECONF_VALUE_INT;
     case CompOptionTypeFloat:
-	return GCONF_VALUE_FLOAT;
+	return MATECONF_VALUE_FLOAT;
     case CompOptionTypeString:
     case CompOptionTypeColor:
     case CompOptionTypeKey:
     case CompOptionTypeButton:
     case CompOptionTypeEdge:
     case CompOptionTypeMatch:
-	return GCONF_VALUE_STRING;
+	return MATECONF_VALUE_STRING;
     case CompOptionTypeList:
-	return GCONF_VALUE_LIST;
+	return MATECONF_VALUE_LIST;
     default:
 	break;
     }
 
-    return GCONF_VALUE_INVALID;
+    return MATECONF_VALUE_INVALID;
 }
 
 static void
-gconfSetValue (CompObject      *object,
+mateconfSetValue (CompObject      *object,
 	       CompOptionValue *value,
 	       CompOptionType  type,
-	       GConfValue      *gvalue)
+	       MateConfValue      *gvalue)
 {
     switch (type) {
     case CompOptionTypeBool:
-	gconf_value_set_bool (gvalue, value->b);
+	mateconf_value_set_bool (gvalue, value->b);
 	break;
     case CompOptionTypeInt:
-	gconf_value_set_int (gvalue, value->i);
+	mateconf_value_set_int (gvalue, value->i);
 	break;
     case CompOptionTypeFloat:
-	gconf_value_set_float (gvalue, value->f);
+	mateconf_value_set_float (gvalue, value->f);
 	break;
     case CompOptionTypeString:
-	gconf_value_set_string (gvalue, value->s);
+	mateconf_value_set_string (gvalue, value->s);
 	break;
     case CompOptionTypeColor: {
 	gchar *color;
 
 	color = colorToString (value->c);
-	gconf_value_set_string (gvalue, color);
+	mateconf_value_set_string (gvalue, color);
 
 	free (color);
     } break;
@@ -159,7 +159,7 @@ gconfSetValue (CompObject      *object,
 	    return;
 
 	action = keyActionToString (GET_CORE_DISPLAY (object), &value->action);
-	gconf_value_set_string (gvalue, action);
+	mateconf_value_set_string (gvalue, action);
 
 	free (action);
     } break;
@@ -174,7 +174,7 @@ gconfSetValue (CompObject      *object,
 
 	action = buttonActionToString (GET_CORE_DISPLAY (object),
 				       &value->action);
-	gconf_value_set_string (gvalue, action);
+	mateconf_value_set_string (gvalue, action);
 
 	free (action);
     } break;
@@ -182,18 +182,18 @@ gconfSetValue (CompObject      *object,
 	gchar *edge;
 
 	edge = edgeMaskToString (value->action.edgeMask);
-	gconf_value_set_string (gvalue, edge);
+	mateconf_value_set_string (gvalue, edge);
 
 	free (edge);
     } break;
     case CompOptionTypeBell:
-	gconf_value_set_bool (gvalue, value->action.bell);
+	mateconf_value_set_bool (gvalue, value->action.bell);
 	break;
     case CompOptionTypeMatch: {
 	gchar *match;
 
 	match = matchToString (&value->match);
-	gconf_value_set_string (gvalue, match);
+	mateconf_value_set_string (gvalue, match);
 
 	free (match);
     } break;
@@ -203,98 +203,98 @@ gconfSetValue (CompObject      *object,
 }
 
 static void
-gconfSetOption (CompObject  *object,
+mateconfSetOption (CompObject  *object,
 		CompOption  *o,
 		const gchar *plugin)
 {
-    GConfValueType type = gconfTypeFromCompType (o->type);
-    GConfValue     *gvalue, *existingValue = NULL;
+    MateConfValueType type = mateconfTypeFromCompType (o->type);
+    MateConfValue     *gvalue, *existingValue = NULL;
     gchar          *key;
 
-    GCONF_CORE (&core);
+    MATECONF_CORE (&core);
 
-    if (type == GCONF_VALUE_INVALID)
+    if (type == MATECONF_VALUE_INVALID)
 	return;
 
-    key = gconfGetKey (object, plugin, o->name);
+    key = mateconfGetKey (object, plugin, o->name);
 
-    existingValue = gconf_client_get (gc->client, key, NULL);
-    gvalue = gconf_value_new (type);
+    existingValue = mateconf_client_get (gc->client, key, NULL);
+    gvalue = mateconf_value_new (type);
 
     if (o->type == CompOptionTypeList)
     {
 	GSList     *node, *list = NULL;
-	GConfValue *gv;
+	MateConfValue *gv;
 	int	   i;
 
-	type = gconfTypeFromCompType (o->value.list.type);
+	type = mateconfTypeFromCompType (o->value.list.type);
 
 	for (i = 0; i < o->value.list.nValue; i++)
 	{
-	    gv = gconf_value_new (type);
-	    gconfSetValue (object, &o->value.list.value[i],
+	    gv = mateconf_value_new (type);
+	    mateconfSetValue (object, &o->value.list.value[i],
 			   o->value.list.type, gv);
 	    list = g_slist_append (list, gv);
 	}
 
-	gconf_value_set_list_type (gvalue, type);
-	gconf_value_set_list (gvalue, list);
+	mateconf_value_set_list_type (gvalue, type);
+	mateconf_value_set_list (gvalue, list);
 
-	if (!existingValue || gconf_value_compare (existingValue, gvalue))
-	    gconf_client_set (gc->client, key, gvalue, NULL);
+	if (!existingValue || mateconf_value_compare (existingValue, gvalue))
+	    mateconf_client_set (gc->client, key, gvalue, NULL);
 
 	for (node = list; node; node = node->next)
-	    gconf_value_free ((GConfValue *) node->data);
+	    mateconf_value_free ((MateConfValue *) node->data);
 
 	g_slist_free (list);
     }
     else
     {
-	gconfSetValue (object, &o->value, o->type, gvalue);
+	mateconfSetValue (object, &o->value, o->type, gvalue);
 
-	if (!existingValue || gconf_value_compare (existingValue, gvalue))
-	    gconf_client_set (gc->client, key, gvalue, NULL);
+	if (!existingValue || mateconf_value_compare (existingValue, gvalue))
+	    mateconf_client_set (gc->client, key, gvalue, NULL);
     }
 
-    gconf_value_free (gvalue);
+    mateconf_value_free (gvalue);
 
     if (existingValue)
-	gconf_value_free (existingValue);
+	mateconf_value_free (existingValue);
 
     g_free (key);
 }
 
 static Bool
-gconfGetValue (CompObject      *object,
+mateconfGetValue (CompObject      *object,
 	       CompOptionValue *value,
 	       CompOptionType  type,
-	       GConfValue      *gvalue)
+	       MateConfValue      *gvalue)
 
 {
     if (type         == CompOptionTypeBool &&
-	gvalue->type == GCONF_VALUE_BOOL)
+	gvalue->type == MATECONF_VALUE_BOOL)
     {
-	value->b = gconf_value_get_bool (gvalue);
+	value->b = mateconf_value_get_bool (gvalue);
 	return TRUE;
     }
     else if (type         == CompOptionTypeInt &&
-	     gvalue->type == GCONF_VALUE_INT)
+	     gvalue->type == MATECONF_VALUE_INT)
     {
-	value->i = gconf_value_get_int (gvalue);
+	value->i = mateconf_value_get_int (gvalue);
 	return TRUE;
     }
     else if (type         == CompOptionTypeFloat &&
-	     gvalue->type == GCONF_VALUE_FLOAT)
+	     gvalue->type == MATECONF_VALUE_FLOAT)
     {
-	value->f = gconf_value_get_float (gvalue);
+	value->f = mateconf_value_get_float (gvalue);
 	return TRUE;
     }
     else if (type         == CompOptionTypeString &&
-	     gvalue->type == GCONF_VALUE_STRING)
+	     gvalue->type == MATECONF_VALUE_STRING)
     {
 	const char *str;
 
-	str = gconf_value_get_string (gvalue);
+	str = mateconf_value_get_string (gvalue);
 	if (str)
 	{
 	    value->s = strdup (str);
@@ -303,21 +303,21 @@ gconfGetValue (CompObject      *object,
 	}
     }
     else if (type         == CompOptionTypeColor &&
-	     gvalue->type == GCONF_VALUE_STRING)
+	     gvalue->type == MATECONF_VALUE_STRING)
     {
 	const gchar *color;
 
-	color = gconf_value_get_string (gvalue);
+	color = mateconf_value_get_string (gvalue);
 
 	if (stringToColor (color, value->c))
 	    return TRUE;
     }
     else if (type         == CompOptionTypeKey &&
-	     gvalue->type == GCONF_VALUE_STRING)
+	     gvalue->type == MATECONF_VALUE_STRING)
     {
 	const gchar *action;
 
-	action = gconf_value_get_string (gvalue);
+	action = mateconf_value_get_string (gvalue);
 
 	while (object && object->type != COMP_OBJECT_TYPE_DISPLAY)
 	    object = object->parent;
@@ -329,11 +329,11 @@ gconfGetValue (CompObject      *object,
 	return TRUE;
     }
     else if (type         == CompOptionTypeButton &&
-	     gvalue->type == GCONF_VALUE_STRING)
+	     gvalue->type == MATECONF_VALUE_STRING)
     {
 	const gchar *action;
 
-	action = gconf_value_get_string (gvalue);
+	action = mateconf_value_get_string (gvalue);
 
 	while (object && object->type != COMP_OBJECT_TYPE_DISPLAY)
 	    object = object->parent;
@@ -346,27 +346,27 @@ gconfGetValue (CompObject      *object,
 	return TRUE;
     }
     else if (type         == CompOptionTypeEdge &&
-	     gvalue->type == GCONF_VALUE_STRING)
+	     gvalue->type == MATECONF_VALUE_STRING)
     {
 	const gchar *edge;
 
-	edge = gconf_value_get_string (gvalue);
+	edge = mateconf_value_get_string (gvalue);
 
 	value->action.edgeMask = stringToEdgeMask (edge);
 	return TRUE;
     }
     else if (type         == CompOptionTypeBell &&
-	     gvalue->type == GCONF_VALUE_BOOL)
+	     gvalue->type == MATECONF_VALUE_BOOL)
     {
-	value->action.bell = gconf_value_get_bool (gvalue);
+	value->action.bell = mateconf_value_get_bool (gvalue);
 	return TRUE;
     }
     else if (type         == CompOptionTypeMatch &&
-	     gvalue->type == GCONF_VALUE_STRING)
+	     gvalue->type == MATECONF_VALUE_STRING)
     {
 	const gchar *match;
 
-	match = gconf_value_get_string (gvalue);
+	match = mateconf_value_get_string (gvalue);
 
 	matchInit (&value->match);
 	matchAddFromString (&value->match, match);
@@ -377,31 +377,31 @@ gconfGetValue (CompObject      *object,
 }
 
 static Bool
-gconfReadOptionValue (CompObject      *object,
-		      GConfEntry      *entry,
+mateconfReadOptionValue (CompObject      *object,
+		      MateConfEntry      *entry,
 		      CompOption      *o,
 		      CompOptionValue *value)
 {
-    GConfValue *gvalue;
+    MateConfValue *gvalue;
 
-    gvalue = gconf_entry_get_value (entry);
+    gvalue = mateconf_entry_get_value (entry);
     if (!gvalue)
 	return FALSE;
 
     compInitOptionValue (value);
 
     if (o->type      == CompOptionTypeList &&
-	gvalue->type == GCONF_VALUE_LIST)
+	gvalue->type == MATECONF_VALUE_LIST)
     {
-	GConfValueType type;
+	MateConfValueType type;
 	GSList	       *list;
 	int	       i, n;
 
-	type = gconf_value_get_list_type (gvalue);
-	if (gconfTypeFromCompType (o->value.list.type) != type)
+	type = mateconf_value_get_list_type (gvalue);
+	if (mateconfTypeFromCompType (o->value.list.type) != type)
 	    return FALSE;
 
-	list = gconf_value_get_list (gvalue);
+	list = mateconf_value_get_list (gvalue);
 	n    = g_slist_length (list);
 
 	value->list.value  = NULL;
@@ -415,10 +415,10 @@ gconfReadOptionValue (CompObject      *o
 	    {
 		for (i = 0; i < n; i++)
 		{
-		    if (!gconfGetValue (object,
+		    if (!mateconfGetValue (object,
 					&value->list.value[i],
 					o->value.list.type,
-					(GConfValue *) list->data))
+					(MateConfValue *) list->data))
 			break;
 
 		    value->list.nValue++;
@@ -436,7 +436,7 @@ gconfReadOptionValue (CompObject      *o
     }
     else
     {
-	if (!gconfGetValue (object, value, o->type, gvalue))
+	if (!mateconfGetValue (object, value, o->type, gvalue))
 	    return FALSE;
     }
 
@@ -444,54 +444,54 @@ gconfReadOptionValue (CompObject      *o
 }
 
 static void
-gconfGetOption (CompObject *object,
+mateconfGetOption (CompObject *object,
 		CompOption *o,
 		const char *plugin)
 {
-    GConfEntry *entry;
+    MateConfEntry *entry;
     gchar      *key;
 
-    GCONF_CORE (&core);
+    MATECONF_CORE (&core);
 
-    key = gconfGetKey (object, plugin, o->name);
+    key = mateconfGetKey (object, plugin, o->name);
 
-    entry = gconf_client_get_entry (gc->client, key, NULL, TRUE, NULL);
+    entry = mateconf_client_get_entry (gc->client, key, NULL, TRUE, NULL);
     if (entry)
     {
 	CompOptionValue value;
 
-	if (gconfReadOptionValue (object, entry, o, &value))
+	if (mateconfReadOptionValue (object, entry, o, &value))
 	{
 	    (*core.setOptionForPlugin) (object, plugin, o->name, &value);
 	    compFiniOptionValue (&value, o->type);
 	}
 	else
 	{
-	    gconfSetOption (object, o, plugin);
+	    mateconfSetOption (object, o, plugin);
 	}
 
-	gconf_entry_free (entry);
+	mateconf_entry_free (entry);
     }
 
     g_free (key);
 }
 
 static CompBool
-gconfReloadObjectTree (CompObject *object,
+mateconfReloadObjectTree (CompObject *object,
 			 void       *closure);
 
 static CompBool
-gconfReloadObjectsWithType (CompObjectType type,
+mateconfReloadObjectsWithType (CompObjectType type,
 			      CompObject     *parent,
 			      void	     *closure)
 {
-    compObjectForEach (parent, type, gconfReloadObjectTree, closure);
+    compObjectForEach (parent, type, mateconfReloadObjectTree, closure);
 
     return TRUE;
 }
 
 static CompBool
-gconfReloadObjectTree (CompObject *object,
+mateconfReloadObjectTree (CompObject *object,
 		       void       *closure)
 {
     CompPlugin *p = (CompPlugin *) closure;
@@ -500,26 +500,26 @@ gconfReloadObjectTree (CompObject *objec
 
     option = (*p->vTable->getObjectOptions) (p, object, &nOption);
     while (nOption--)
-	gconfGetOption (object, option++, p->vTable->name);
+	mateconfGetOption (object, option++, p->vTable->name);
 
-    compObjectForEachType (object, gconfReloadObjectsWithType, closure);
+    compObjectForEachType (object, mateconfReloadObjectsWithType, closure);
 
     return TRUE;
 }
 
 static Bool
-gconfReload (void *closure)
+mateconfReload (void *closure)
 {
     CompPlugin  *p;
 
-    GCONF_CORE (&core);
+    MATECONF_CORE (&core);
 
     for (p = getPlugins (); p; p = p->next)
     {
 	if (!p->vTable->getObjectOptions)
 	    continue;
 
-	gconfReloadObjectTree (&core.base, (void *) p);
+	mateconfReloadObjectTree (&core.base, (void *) p);
     }
 
     gc->reloadHandle = 0;
@@ -528,18 +528,18 @@ gconfReload (void *closure)
 }
 
 static Bool
-gconfSetOptionForPlugin (CompObject      *object,
+mateconfSetOptionForPlugin (CompObject      *object,
 			 const char	 *plugin,
 			 const char	 *name,
 			 CompOptionValue *value)
 {
     CompBool status;
 
-    GCONF_CORE (&core);
+    MATECONF_CORE (&core);
 
     UNWRAP (gc, &core, setOptionForPlugin);
     status = (*core.setOptionForPlugin) (object, plugin, name, value);
-    WRAP (gc, &core, setOptionForPlugin, gconfSetOptionForPlugin);
+    WRAP (gc, &core, setOptionForPlugin, mateconfSetOptionForPlugin);
 
     if (status && !gc->reloadHandle)
     {
@@ -554,7 +554,7 @@ gconfSetOptionForPlugin (CompObject
 	    option = (*p->vTable->getObjectOptions) (p, object, &nOption);
 	    option = compFindOption (option, nOption, name, 0);
 	    if (option)
-		gconfSetOption (object, option, p->vTable->name);
+		mateconfSetOption (object, option, p->vTable->name);
 	}
     }
 
@@ -562,16 +562,16 @@ gconfSetOptionForPlugin (CompObject
 }
 
 static CompBool
-gconfInitPluginForObject (CompPlugin *p,
+mateconfInitPluginForObject (CompPlugin *p,
 			  CompObject *o)
 {
     CompBool status;
 
-    GCONF_CORE (&core);
+    MATECONF_CORE (&core);
 
     UNWRAP (gc, &core, initPluginForObject);
     status = (*core.initPluginForObject) (p, o);
-    WRAP (gc, &core, initPluginForObject, gconfInitPluginForObject);
+    WRAP (gc, &core, initPluginForObject, mateconfInitPluginForObject);
 
     if (status && p->vTable->getObjectOptions)
     {
@@ -580,7 +580,7 @@ gconfInitPluginForObject (CompPlugin *p,
 
 	option = (*p->vTable->getObjectOptions) (p, o, &nOption);
 	while (nOption--)
-	    gconfGetOption (o, option++, p->vTable->name);
+	    mateconfGetOption (o, option++, p->vTable->name);
     }
 
     return status;
@@ -588,9 +588,9 @@ gconfInitPluginForObject (CompPlugin *p,
 
 /* MULTIDPYERROR: only works with one or less displays present */
 static void
-gconfKeyChanged (GConfClient *client,
+mateconfKeyChanged (MateConfClient *client,
 		 guint	     cnxn_id,
-		 GConfEntry  *entry,
+		 MateConfEntry  *entry,
 		 gpointer    user_data)
 {
     CompPlugin *plugin;
@@ -676,7 +676,7 @@ gconfKeyChanged (GConfClient *client,
     {
 	CompOptionValue value;
 
-	if (gconfReadOptionValue (object, entry, option, &value))
+	if (mateconfReadOptionValue (object, entry, option, &value))
 	{
 	    (*core.setOptionForPlugin) (object,
 					plugin->vTable->name,
@@ -691,7 +691,7 @@ gconfKeyChanged (GConfClient *client,
 }
 
 static void
-gconfSendGLibNotify (CompScreen *s)
+mateconfSendGLibNotify (CompScreen *s)
 {
     Display *dpy = s->display->display;
     XEvent  xev;
@@ -713,32 +713,32 @@ gconfSendGLibNotify (CompScreen *s)
 }
 
 static Bool
-gconfInitCore (CompPlugin *p,
+mateconfInitCore (CompPlugin *p,
 	       CompCore   *c)
 {
-    GConfCore *gc;
+    MateConfCore *gc;
 
     if (!checkPluginABI ("core", CORE_ABIVERSION))
 	return FALSE;
 
-    gc = malloc (sizeof (GConfCore));
+    gc = malloc (sizeof (MateConfCore));
     if (!gc)
 	return FALSE;
 
     g_type_init ();
 
-    gc->client = gconf_client_get_default ();
+    gc->client = mateconf_client_get_default ();
 
-    gconf_client_add_dir (gc->client, "/apps/" APP_NAME,
-			  GCONF_CLIENT_PRELOAD_NONE, NULL);
+    mateconf_client_add_dir (gc->client, "/apps/" APP_NAME,
+			  MATECONF_CLIENT_PRELOAD_NONE, NULL);
 
-    gc->reloadHandle = compAddTimeout (0, 0, gconfReload, 0);
+    gc->reloadHandle = compAddTimeout (0, 0, mateconfReload, 0);
 
-    gc->cnxn = gconf_client_notify_add (gc->client, "/apps/" APP_NAME,
-					gconfKeyChanged, c, NULL, NULL);
+    gc->cnxn = mateconf_client_notify_add (gc->client, "/apps/" APP_NAME,
+					mateconfKeyChanged, c, NULL, NULL);
 
-    WRAP (gc, c, initPluginForObject, gconfInitPluginForObject);
-    WRAP (gc, c, setOptionForPlugin, gconfSetOptionForPlugin);
+    WRAP (gc, c, initPluginForObject, mateconfInitPluginForObject);
+    WRAP (gc, c, setOptionForPlugin, mateconfSetOptionForPlugin);
 
     c->base.privates[corePrivateIndex].ptr = gc;
 
@@ -746,10 +746,10 @@ gconfInitCore (CompPlugin *p,
 }
 
 static void
-gconfFiniCore (CompPlugin *p,
+mateconfFiniCore (CompPlugin *p,
 	       CompCore   *c)
 {
-    GCONF_CORE (c);
+    MATECONF_CORE (c);
 
     UNWRAP (gc, c, initPluginForObject);
     UNWRAP (gc, c, setOptionForPlugin);
@@ -758,86 +758,86 @@ gconfFiniCore (CompPlugin *p,
 	compRemoveTimeout (gc->reloadHandle);
 
     if (gc->cnxn)
-	gconf_client_notify_remove (gc->client, gc->cnxn);
+	mateconf_client_notify_remove (gc->client, gc->cnxn);
 
-    gconf_client_remove_dir (gc->client, "/apps/" APP_NAME, NULL);
-    gconf_client_clear_cache (gc->client);
+    mateconf_client_remove_dir (gc->client, "/apps/" APP_NAME, NULL);
+    mateconf_client_clear_cache (gc->client);
 
     free (gc);
 }
 
 static Bool
-gconfInitScreen (CompPlugin *p,
+mateconfInitScreen (CompPlugin *p,
 		 CompScreen *s)
 {
-    gconfSendGLibNotify (s);
+    mateconfSendGLibNotify (s);
 
     return TRUE;
 }
 
 static CompBool
-gconfInitObject (CompPlugin *p,
+mateconfInitObject (CompPlugin *p,
 		 CompObject *o)
 {
     static InitPluginObjectProc dispTab[] = {
-	(InitPluginObjectProc) gconfInitCore,
+	(InitPluginObjectProc) mateconfInitCore,
 	(InitPluginObjectProc) 0, /* InitDisplay */
-	(InitPluginObjectProc) gconfInitScreen
+	(InitPluginObjectProc) mateconfInitScreen
     };
 
     RETURN_DISPATCH (o, dispTab, ARRAY_SIZE (dispTab), TRUE, (p, o));
 }
 
 static void
-gconfFiniObject (CompPlugin *p,
+mateconfFiniObject (CompPlugin *p,
 		 CompObject *o)
 {
     static FiniPluginObjectProc dispTab[] = {
-	(FiniPluginObjectProc) gconfFiniCore
+	(FiniPluginObjectProc) mateconfFiniCore
     };
 
     DISPATCH (o, dispTab, ARRAY_SIZE (dispTab), (p, o));
 }
 
 static Bool
-gconfInit (CompPlugin *p)
+mateconfInit (CompPlugin *p)
 {
-    if (!compInitPluginMetadataFromInfo (&gconfMetadata, p->vTable->name,
+    if (!compInitPluginMetadataFromInfo (&mateconfMetadata, p->vTable->name,
 					 0, 0, 0, 0))
 	return FALSE;
 
     corePrivateIndex = allocateCorePrivateIndex ();
     if (corePrivateIndex < 0)
     {
-	compFiniMetadata (&gconfMetadata);
+	compFiniMetadata (&mateconfMetadata);
 	return FALSE;
     }
 
-    compAddMetadataFromFile (&gconfMetadata, p->vTable->name);
+    compAddMetadataFromFile (&mateconfMetadata, p->vTable->name);
 
     return TRUE;
 }
 
 static void
-gconfFini (CompPlugin *p)
+mateconfFini (CompPlugin *p)
 {
     freeCorePrivateIndex (corePrivateIndex);
-    compFiniMetadata (&gconfMetadata);
+    compFiniMetadata (&mateconfMetadata);
 }
 
 static CompMetadata *
-gconfGetMetadata (CompPlugin *plugin)
+mateconfGetMetadata (CompPlugin *plugin)
 {
-    return &gconfMetadata;
+    return &mateconfMetadata;
 }
 
-CompPluginVTable gconfVTable = {
-    "gconf",
-    gconfGetMetadata,
-    gconfInit,
-    gconfFini,
-    gconfInitObject,
-    gconfFiniObject,
+CompPluginVTable mateconfVTable = {
+    "mateconf",
+    mateconfGetMetadata,
+    mateconfInit,
+    mateconfFini,
+    mateconfInitObject,
+    mateconfFiniObject,
     0, /* GetObjectOptions */
     0  /* SetObjectOption */
 };
@@ -845,5 +845,5 @@ CompPluginVTable gconfVTable = {
 CompPluginVTable *
 getCompPluginInfo20070830 (void)
 {
-    return &gconfVTable;
+    return &mateconfVTable;
 }
--- a/plugins/glib.c
+++ b/plugins/glib.c
@@ -37,7 +37,7 @@ typedef struct _GLibWatch {
     CompDisplay	      *display;
 } GLibWatch;
 
-typedef struct _GConfDisplay {
+typedef struct _MateConfDisplay {
     HandleEventProc   handleEvent;
     CompTimeoutHandle timeoutHandle;
     CompTimeoutHandle wakeupTimeoutHandle;
--- a/plugins/gnomecompat.c
+++ b/plugins/gnomecompat.c
@@ -25,32 +25,32 @@
 
 #include <compiz-core.h>
 
-static CompMetadata gnomeMetadata;
+static CompMetadata mateMetadata;
 
 static int displayPrivateIndex;
 
-#define GNOME_DISPLAY_OPTION_MAIN_MENU_KEY              0
-#define GNOME_DISPLAY_OPTION_RUN_DIALOG_KEY             1
-#define GNOME_DISPLAY_OPTION_SCREENSHOT_CMD             2
-#define GNOME_DISPLAY_OPTION_RUN_SCREENSHOT_KEY         3
-#define GNOME_DISPLAY_OPTION_WINDOW_SCREENSHOT_CMD      4
-#define GNOME_DISPLAY_OPTION_RUN_WINDOW_SCREENSHOT_KEY  5
-#define GNOME_DISPLAY_OPTION_TERMINAL_CMD               6
-#define GNOME_DISPLAY_OPTION_RUN_TERMINAL_KEY           7
-#define GNOME_DISPLAY_OPTION_NUM                        8
+#define MATE_DISPLAY_OPTION_MAIN_MENU_KEY              0
+#define MATE_DISPLAY_OPTION_RUN_DIALOG_KEY             1
+#define MATE_DISPLAY_OPTION_SCREENSHOT_CMD             2
+#define MATE_DISPLAY_OPTION_RUN_SCREENSHOT_KEY         3
+#define MATE_DISPLAY_OPTION_WINDOW_SCREENSHOT_CMD      4
+#define MATE_DISPLAY_OPTION_RUN_WINDOW_SCREENSHOT_KEY  5
+#define MATE_DISPLAY_OPTION_TERMINAL_CMD               6
+#define MATE_DISPLAY_OPTION_RUN_TERMINAL_KEY           7
+#define MATE_DISPLAY_OPTION_NUM                        8
 
-typedef struct _GnomeDisplay {
-    CompOption opt[GNOME_DISPLAY_OPTION_NUM];
+typedef struct _MateDisplay {
+    CompOption opt[MATE_DISPLAY_OPTION_NUM];
 
     Atom panelActionAtom;
     Atom panelMainMenuAtom;
     Atom panelRunDialogAtom;
-} GnomeDisplay;
+} MateDisplay;
 
-#define GET_GNOME_DISPLAY(d)                                       \
-    ((GnomeDisplay *) (d)->base.privates[displayPrivateIndex].ptr)
-#define GNOME_DISPLAY(d)                                           \
-    GnomeDisplay *gd = GET_GNOME_DISPLAY (d)
+#define GET_MATE_DISPLAY(d)                                       \
+    ((MateDisplay *) (d)->base.privates[displayPrivateIndex].ptr)
+#define MATE_DISPLAY(d)                                           \
+    MateDisplay *gd = GET_MATE_DISPLAY (d)
 
 #define NUM_OPTIONS(d) (sizeof ((d)->opt) / sizeof (CompOption))
 
@@ -69,7 +69,7 @@ runDispatch (CompDisplay     *d,
 
     if (s)
     {
-	GNOME_DISPLAY (d);
+	MATE_DISPLAY (d);
 
 	runCommand (s, gd->opt[action->priv.val].value.s);
     }
@@ -88,7 +88,7 @@ panelAction (CompDisplay *d,
     XEvent     event;
     Time       time;
 
-    GNOME_DISPLAY (d);
+    MATE_DISPLAY (d);
 
     xid = getIntOptionNamed (option, nOption, "root", 0);
     s   = findScreenAtDisplay (d, xid);
@@ -122,7 +122,7 @@ showMainMenu (CompDisplay     *d,
 	      CompOption      *option,
 	      int             nOption)
 {
-    GNOME_DISPLAY (d);
+    MATE_DISPLAY (d);
 
     panelAction (d, option, nOption, gd->panelMainMenuAtom);
 
@@ -136,13 +136,13 @@ showRunDialog (CompDisplay     *d,
 	       CompOption      *option,
 	       int             nOption)
 {
-    GNOME_DISPLAY (d);
+    MATE_DISPLAY (d);
 
     panelAction (d, option, nOption, gd->panelRunDialogAtom);
 
     return TRUE;
 }
-static const CompMetadataOptionInfo gnomeDisplayOptionInfo[] = {
+static const CompMetadataOptionInfo mateDisplayOptionInfo[] = {
     { "main_menu_key", "key", 0, showMainMenu, 0 },
     { "run_key", "key", 0, showRunDialog, 0 },
     { "command_screenshot", "string", 0, 0, 0 },
@@ -154,45 +154,45 @@ static const CompMetadataOptionInfo gnom
 };
 
 static CompBool
-gnomeInitDisplay (CompPlugin  *p,
+mateInitDisplay (CompPlugin  *p,
 		  CompDisplay *d)
 {
-    GnomeDisplay *gd;
+    MateDisplay *gd;
     int          opt, index;
 
     if (!checkPluginABI ("core", CORE_ABIVERSION))
 	return FALSE;
 
-    gd = malloc (sizeof (GnomeDisplay));
+    gd = malloc (sizeof (MateDisplay));
     if (!gd)
 	return FALSE;
 
     if (!compInitDisplayOptionsFromMetadata (d,
-					     &gnomeMetadata,
-					     gnomeDisplayOptionInfo,
+					     &mateMetadata,
+					     mateDisplayOptionInfo,
 					     gd->opt,
-					     GNOME_DISPLAY_OPTION_NUM))
+					     MATE_DISPLAY_OPTION_NUM))
     {
 	free (gd);
 	return FALSE;
     }
 
-    opt = GNOME_DISPLAY_OPTION_RUN_SCREENSHOT_KEY;
-    gd->opt[opt].value.action.priv.val = GNOME_DISPLAY_OPTION_SCREENSHOT_CMD;
+    opt = MATE_DISPLAY_OPTION_RUN_SCREENSHOT_KEY;
+    gd->opt[opt].value.action.priv.val = MATE_DISPLAY_OPTION_SCREENSHOT_CMD;
 
-    opt   = GNOME_DISPLAY_OPTION_RUN_WINDOW_SCREENSHOT_KEY;
-    index = GNOME_DISPLAY_OPTION_WINDOW_SCREENSHOT_CMD;
+    opt   = MATE_DISPLAY_OPTION_RUN_WINDOW_SCREENSHOT_KEY;
+    index = MATE_DISPLAY_OPTION_WINDOW_SCREENSHOT_CMD;
     gd->opt[opt].value.action.priv.val = index;
 
-    opt = GNOME_DISPLAY_OPTION_RUN_TERMINAL_KEY;
-    gd->opt[opt].value.action.priv.val = GNOME_DISPLAY_OPTION_TERMINAL_CMD;
+    opt = MATE_DISPLAY_OPTION_RUN_TERMINAL_KEY;
+    gd->opt[opt].value.action.priv.val = MATE_DISPLAY_OPTION_TERMINAL_CMD;
 
     gd->panelActionAtom =
-	XInternAtom (d->display, "_GNOME_PANEL_ACTION", FALSE);
+	XInternAtom (d->display, "_MATE_PANEL_ACTION", FALSE);
     gd->panelMainMenuAtom =
-	XInternAtom (d->display, "_GNOME_PANEL_ACTION_MAIN_MENU", FALSE);
+	XInternAtom (d->display, "_MATE_PANEL_ACTION_MAIN_MENU", FALSE);
     gd->panelRunDialogAtom =
-	XInternAtom (d->display, "_GNOME_PANEL_ACTION_RUN_DIALOG", FALSE);
+	XInternAtom (d->display, "_MATE_PANEL_ACTION_RUN_DIALOG", FALSE);
 
     d->base.privates[displayPrivateIndex].ptr = gd;
 
@@ -200,36 +200,36 @@ gnomeInitDisplay (CompPlugin  *p,
 }
 
 static void
-gnomeFiniDisplay (CompPlugin  *p,
+mateFiniDisplay (CompPlugin  *p,
 		  CompDisplay *d)
 {
-    GNOME_DISPLAY (d);
+    MATE_DISPLAY (d);
 
-    compFiniDisplayOptions (d, gd->opt, GNOME_DISPLAY_OPTION_NUM);
+    compFiniDisplayOptions (d, gd->opt, MATE_DISPLAY_OPTION_NUM);
 
     free (gd);
 }
 
 static CompOption *
-gnomeGetDisplayOptions (CompPlugin  *p,
+mateGetDisplayOptions (CompPlugin  *p,
 			CompDisplay *d,
 			int         *count)
 {
-    GNOME_DISPLAY (d);
+    MATE_DISPLAY (d);
 
     *count = NUM_OPTIONS (gd);
     return gd->opt;
 }
 
 static CompBool
-gnomeSetDisplayOption (CompPlugin      *p,
+mateSetDisplayOption (CompPlugin      *p,
 		       CompDisplay     *d,
 		       const char      *name,
 		       CompOptionValue *value)
 {
     CompOption *o;
 
-    GNOME_DISPLAY (d);
+    MATE_DISPLAY (d);
 
     o = compFindOption (gd->opt, NUM_OPTIONS (gd), name, NULL);
     if (!o)
@@ -239,37 +239,37 @@ gnomeSetDisplayOption (CompPlugin      *
 }
 
 static CompBool
-gnomeInitObject (CompPlugin *p,
+mateInitObject (CompPlugin *p,
 		 CompObject *o)
 {
     static InitPluginObjectProc dispTab[] = {
 	(InitPluginObjectProc) 0, /* InitCore */
-	(InitPluginObjectProc) gnomeInitDisplay
+	(InitPluginObjectProc) mateInitDisplay
     };
 
     RETURN_DISPATCH (o, dispTab, ARRAY_SIZE (dispTab), TRUE, (p, o));
 }
 
 static void
-gnomeFiniObject (CompPlugin *p,
+mateFiniObject (CompPlugin *p,
 		 CompObject *o)
 {
     static FiniPluginObjectProc dispTab[] = {
 	(FiniPluginObjectProc) 0, /* FiniCore */
-	(FiniPluginObjectProc) gnomeFiniDisplay
+	(FiniPluginObjectProc) mateFiniDisplay
     };
 
     DISPATCH (o, dispTab, ARRAY_SIZE (dispTab), (p, o));
 }
 
 static CompOption *
-gnomeGetObjectOptions (CompPlugin *p,
+mateGetObjectOptions (CompPlugin *p,
 		       CompObject *o,
 		       int        *count)
 {
     static GetPluginObjectOptionsProc dispTab[] = {
 	(GetPluginObjectOptionsProc) 0, /* GetCoreOptions */
-	(GetPluginObjectOptionsProc) gnomeGetDisplayOptions
+	(GetPluginObjectOptionsProc) mateGetDisplayOptions
     };
 
     *count = 0;
@@ -278,14 +278,14 @@ gnomeGetObjectOptions (CompPlugin *p,
 }
 
 static CompBool
-gnomeSetObjectOption (CompPlugin      *p,
+mateSetObjectOption (CompPlugin      *p,
 		      CompObject      *o,
 		      const char      *name,
 		      CompOptionValue *value)
 {
     static SetPluginObjectOptionProc dispTab[] = {
 	(SetPluginObjectOptionProc) 0, /* SetCoreOption */
-	(SetPluginObjectOptionProc) gnomeSetDisplayOption,
+	(SetPluginObjectOptionProc) mateSetDisplayOption,
     };
 
     RETURN_DISPATCH (o, dispTab, ARRAY_SIZE (dispTab), FALSE,
@@ -293,52 +293,52 @@ gnomeSetObjectOption (CompPlugin      *p
 }
 
 static Bool
-gnomeInit (CompPlugin *p)
+mateInit (CompPlugin *p)
 {
-    if (!compInitPluginMetadataFromInfo (&gnomeMetadata,
+    if (!compInitPluginMetadataFromInfo (&mateMetadata,
 					 p->vTable->name,
-					 gnomeDisplayOptionInfo,
-					 GNOME_DISPLAY_OPTION_NUM, 0, 0))
+					 mateDisplayOptionInfo,
+					 MATE_DISPLAY_OPTION_NUM, 0, 0))
 	return FALSE;
 
     displayPrivateIndex = allocateDisplayPrivateIndex ();
     if (displayPrivateIndex < 0)
     {
-	compFiniMetadata (&gnomeMetadata);
+	compFiniMetadata (&mateMetadata);
 	return FALSE;
     }
 
-    compAddMetadataFromFile (&gnomeMetadata, p->vTable->name);
+    compAddMetadataFromFile (&mateMetadata, p->vTable->name);
 
     return TRUE;
 }
 
 static void
-gnomeFini (CompPlugin *p)
+mateFini (CompPlugin *p)
 {
     freeDisplayPrivateIndex (displayPrivateIndex);
-    compFiniMetadata (&gnomeMetadata);
+    compFiniMetadata (&mateMetadata);
 }
 
 static CompMetadata *
-gnomeGetMetadata (CompPlugin *p)
+mateGetMetadata (CompPlugin *p)
 {
-    return &gnomeMetadata;
+    return &mateMetadata;
 }
 
-static CompPluginVTable gnomeVTable = {
-    "gnomecompat",
-    gnomeGetMetadata,
-    gnomeInit,
-    gnomeFini,
-    gnomeInitObject,
-    gnomeFiniObject,
-    gnomeGetObjectOptions,
-    gnomeSetObjectOption
+static CompPluginVTable mateVTable = {
+    "matecompat",
+    mateGetMetadata,
+    mateInit,
+    mateFini,
+    mateInitObject,
+    mateFiniObject,
+    mateGetObjectOptions,
+    mateSetObjectOption
 };
 
 CompPluginVTable *
 getCompPluginInfo20070830 (void)
 {
-    return &gnomeVTable;
+    return &mateVTable;
 }
--- a/plugins/ini.c
+++ b/plugins/ini.c
@@ -22,7 +22,7 @@
  *
  * Author: Mike Dransfield <mike@blueroot.co.uk>
  *
- * Some code taken from gconf.c by :
+ * Some code taken from mateconf.c by :
  *                       David Reveman <davidr@novell.com>
  */
 
--- a/plugins/Makefile.am
+++ b/plugins/Makefile.am
@@ -71,8 +71,8 @@ libobs_la_SOURCES = obs.c
 libcommands_la_LDFLAGS = -module -avoid-version -no-undefined
 libcommands_la_SOURCES = commands.c
 
-libgnomecompat_la_LDFLAGS = -module -avoid-version -no-undefined
-libgnomecompat_la_SOURCES = gnomecompat.c
+libmatecompat_la_LDFLAGS = -module -avoid-version -no-undefined
+libmatecompat_la_SOURCES = matecompat.c
 
 if USE_LIBRSVG
 libsvg_la_DEPENDENCIES = $(top_builddir)/libdecoration/libdecoration.la
@@ -98,11 +98,11 @@ libglib_la_SOURCES = glib.c
 libglib_module = libglib.la
 endif
 
-if USE_GCONF
-libgconf_la_LDFLAGS = -module -avoid-version -no-undefined
-libgconf_la_LIBADD = @GCONF_LIBS@
-libgconf_la_SOURCES = gconf.c
-libgconf_module = libgconf.la
+if USE_MATECONF
+libmateconf_la_LDFLAGS = -module -avoid-version -no-undefined
+libmateconf_la_LIBADD = @MATECONF_LIBS@
+libmateconf_la_SOURCES = mateconf.c
+libmateconf_module = libmateconf.la
 endif
 
 if USE_KCONFIG
@@ -137,7 +137,7 @@ INCLUDES =					\
 	@LIBPNG_CFLAGS@				\
 	@LIBRSVG_CFLAGS@			\
 	@ANNOTATE_CFLAGS@			\
-	@GCONF_CFLAGS@				\
+	@MATECONF_CFLAGS@				\
 	@KCONFIG_CFLAGS@			\
 	@DBUS_CFLAGS@				\
 	@GLIB_CFLAGS@				\
@@ -155,7 +155,7 @@ moduledir = $(plugindir)
 
 module_LTLIBRARIES =		\
 	$(libglib_module)	\
-	$(libgconf_module)	\
+	$(libmateconf_module)	\
 	$(libkconfig_module)	\
 	libdecoration.la	\
 	libwobbly.la		\
@@ -180,7 +180,7 @@ module_LTLIBRARIES =		\
 	libini.la		\
 	libobs.la		\
 	libcommands.la		\
-	libgnomecompat.la	\
+	libmatecompat.la	\
 	$(libsvg_module)	\
 	$(libannotate_module)	\
 	$(libinotify_module)	\
